{"version":3,"file":"static/js/75.7efb7bd4.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@microsoft/signalr/src/DefaultReconnectPolicy.ts","../node_modules/@microsoft/signalr/src/Errors.ts","../node_modules/@microsoft/signalr/src/HttpClient.ts","../node_modules/@microsoft/signalr/src/Loggers.ts","../node_modules/@microsoft/signalr/src/Utils.ts","../node_modules/@microsoft/signalr/src/FetchHttpClient.ts","../node_modules/@microsoft/signalr/src/XhrHttpClient.ts","../node_modules/@microsoft/signalr/src/ITransport.ts","../node_modules/@microsoft/signalr/src/DefaultHttpClient.ts","../node_modules/@microsoft/signalr/src/HeaderNames.ts","../node_modules/@microsoft/signalr/src/AbortController.ts","../node_modules/@microsoft/signalr/src/LongPollingTransport.ts","../node_modules/@microsoft/signalr/src/ServerSentEventsTransport.ts","../node_modules/@microsoft/signalr/src/WebSocketTransport.ts","../node_modules/@microsoft/signalr/src/HttpConnection.ts","../node_modules/@microsoft/signalr/src/TextMessageFormat.ts","../node_modules/@microsoft/signalr/src/HandshakeProtocol.ts","../node_modules/@microsoft/signalr/src/IHubProtocol.ts","../node_modules/@microsoft/signalr/src/Subject.ts","../node_modules/@microsoft/signalr/src/HubConnection.ts","../node_modules/@microsoft/signalr/src/JsonHubProtocol.ts","../node_modules/@microsoft/signalr/src/HubConnectionBuilder.ts","../node_modules/@microsoft/signalr/src/ILogger.ts","../node_modules/@mui/icons-material/ArrowBack.js","../node_modules/@mui/icons-material/ArrowDownward.js","../node_modules/@mui/icons-material/Brightness4.js","../node_modules/@mui/icons-material/BrightnessHigh.js","../node_modules/@mui/icons-material/Send.js","../node_modules/@mui/icons-material/utils/createSvgIcon.js","../node_modules/@mui/material/internal/switchBaseClasses.js","../node_modules/@mui/material/internal/SwitchBase.js","../node_modules/@mui/material/Switch/switchClasses.js","../node_modules/@mui/material/Switch/Switch.js","../node_modules/@mui/material/utils/createChainedFunction.js","../node_modules/@mui/material/utils/deprecatedPropType.js","../node_modules/@mui/utils/esm/deprecatedPropType.js","../node_modules/@mui/material/utils/requirePropFactory.js","../node_modules/@mui/utils/esm/requirePropFactory.js","../node_modules/@mui/material/utils/setRef.js","../node_modules/@mui/material/utils/useId.js","../node_modules/@mui/material/utils/unsupportedProp.js","../node_modules/@mui/utils/esm/unsupportedProp.js","../node_modules/@mui/material/utils/index.js","../node_modules/fast-average-color/dist/index.esm.js","../node_modules/push.js/src/push/Messages.js","../node_modules/push.js/src/push/Permission.js","../node_modules/push.js/src/push/Util.js","../node_modules/push.js/src/agents/AbstractAgent.js","../node_modules/push.js/src/agents/DesktopAgent.js","../node_modules/push.js/src/agents/MobileChromeAgent.js","../node_modules/push.js/src/agents/MobileFirefoxAgent.js","../node_modules/push.js/src/agents/MSAgent.js","../node_modules/push.js/src/agents/WebKitAgent.js","../node_modules/push.js/src/index.js","../node_modules/push.js/src/push/Push.js"],"sourcesContent":["function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpTransportType } from \"./ITransport\";\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message: string) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when multiple errors have occured. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The collection of errors this error is aggregating. */\r\n    public innerErrors: Error[];\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message: string, innerErrors: Error[]) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n\r\n        this.innerErrors = innerErrors;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    // react-native has a window but no document\r\n    static get isReactNative(): boolean {\r\n        return typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker && !this.isReactNative;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined,\r\n                                  content: string | ArrayBuffer, options: IHttpConnectionOptions): Promise<void> {\r\n    let headers: {[k: string]: string} = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent!)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers},\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel): ILogger {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getErrorString(e: any): string {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    } else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n\r\n/** @private */\r\nexport function getGlobalThis(): unknown {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis } from \"./Utils\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        } else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content!,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\") as string;\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport abstract class HeaderNames {\r\n    static readonly Authorization = \"Authorization\";\r\n    static readonly Cookie = \"Cookie\";\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _getAccessToken(): Promise<string | null> {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent!)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    } else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers: {[k: string]: string} = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the endpoint may not be a SignalR endpoint,\"\r\n                        + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this._stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: ((...args: any[]) => void)[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n}), 'ArrowDownward');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-.89 0-1.74-.2-2.5-.55C11.56 16.5 13 14.42 13 12s-1.44-4.5-3.5-5.45C10.26 6.2 11.11 6 12 6c3.31 0 6 2.69 6 6s-2.69 6-6 6z\"\n}), 'Brightness4');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z\"\n}), 'BrightnessHigh');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _utils.createSvgIcon;\n  }\n});\n\nvar _utils = require(\"@mui/material/utils\");","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getSwitchBaseUtilityClass(slot) {\n  return generateUtilityClass('PrivateSwitchBase', slot);\n}\nconst switchBaseClasses = generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);\nexport default switchBaseClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"autoFocus\", \"checked\", \"checkedIcon\", \"className\", \"defaultChecked\", \"disabled\", \"disableFocusRipple\", \"edge\", \"icon\", \"id\", \"inputProps\", \"inputRef\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"readOnly\", \"required\", \"tabIndex\", \"type\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useControlled from '../utils/useControlled';\nimport useFormControl from '../FormControl/useFormControl';\nimport ButtonBase from '../ButtonBase';\nimport { getSwitchBaseUtilityClass } from './switchBaseClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    checked,\n    disabled,\n    edge\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],\n    input: ['input']\n  };\n  return composeClasses(slots, getSwitchBaseUtilityClass, classes);\n};\n\nconst SwitchBaseRoot = styled(ButtonBase)(({\n  ownerState\n}) => _extends({\n  padding: 9,\n  borderRadius: '50%'\n}, ownerState.edge === 'start' && {\n  marginLeft: ownerState.size === 'small' ? -3 : -12\n}, ownerState.edge === 'end' && {\n  marginRight: ownerState.size === 'small' ? -3 : -12\n}));\nconst SwitchBaseInput = styled('input')({\n  cursor: 'inherit',\n  position: 'absolute',\n  opacity: 0,\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n  margin: 0,\n  padding: 0,\n  zIndex: 1\n});\n/**\n * @ignore - internal component.\n */\n\nconst SwitchBase = /*#__PURE__*/React.forwardRef(function SwitchBase(props, ref) {\n  const {\n    autoFocus,\n    checked: checkedProp,\n    checkedIcon,\n    className,\n    defaultChecked,\n    disabled: disabledProp,\n    disableFocusRipple = false,\n    edge = false,\n    icon,\n    id,\n    inputProps,\n    inputRef,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    readOnly,\n    required,\n    tabIndex,\n    type,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [checked, setCheckedState] = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: 'SwitchBase',\n    state: 'checked'\n  });\n  const muiFormControl = useFormControl();\n\n  const handleFocus = event => {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    }\n  };\n\n  const handleInputChange = event => {\n    // Workaround for https://github.com/facebook/react/issues/9023\n    if (event.nativeEvent.defaultPrevented) {\n      return;\n    }\n\n    const newChecked = event.target.checked;\n    setCheckedState(newChecked);\n\n    if (onChange) {\n      // TODO v6: remove the second argument.\n      onChange(event, newChecked);\n    }\n  };\n\n  let disabled = disabledProp;\n\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n\n  const hasLabelFor = type === 'checkbox' || type === 'radio';\n\n  const ownerState = _extends({}, props, {\n    checked,\n    disabled,\n    disableFocusRipple,\n    edge\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SwitchBaseRoot, _extends({\n    component: \"span\",\n    className: clsx(classes.root, className),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled,\n    tabIndex: null,\n    role: undefined,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/_jsx(SwitchBaseInput, _extends({\n      autoFocus: autoFocus,\n      checked: checkedProp,\n      defaultChecked: defaultChecked,\n      className: classes.input,\n      disabled: disabled,\n      id: hasLabelFor && id,\n      name: name,\n      onChange: handleInputChange,\n      readOnly: readOnly,\n      ref: inputRef,\n      required: required,\n      ownerState: ownerState,\n      tabIndex: tabIndex,\n      type: type\n    }, type === 'checkbox' && value === undefined ? {} : {\n      value\n    }, inputProps)), checked ? checkedIcon : icon]\n  }));\n}); // NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\n\nprocess.env.NODE_ENV !== \"production\" ? SwitchBase.propTypes = {\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node.isRequired,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string.isRequired,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default SwitchBase;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getSwitchUtilityClass(slot) {\n  return generateUtilityClass('MuiSwitch', slot);\n}\nconst switchClasses = generateUtilityClasses('MuiSwitch', ['root', 'edgeStart', 'edgeEnd', 'switchBase', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium', 'checked', 'disabled', 'input', 'thumb', 'track']);\nexport default switchClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"edge\", \"size\", \"sx\"];\n// @inheritedComponent IconButton\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha, darken, lighten } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport switchClasses, { getSwitchUtilityClass } from './switchClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    edge,\n    size,\n    color,\n    checked,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],\n    switchBase: ['switchBase', `color${capitalize(color)}`, checked && 'checked', disabled && 'disabled'],\n    thumb: ['thumb'],\n    track: ['track'],\n    input: ['input']\n  };\n  const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst SwitchRoot = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'inline-flex',\n  width: 34 + 12 * 2,\n  height: 14 + 12 * 2,\n  overflow: 'hidden',\n  padding: 12,\n  boxSizing: 'border-box',\n  position: 'relative',\n  flexShrink: 0,\n  zIndex: 0,\n  // Reset the stacking context.\n  verticalAlign: 'middle',\n  // For correct alignment with the text.\n  '@media print': {\n    colorAdjust: 'exact'\n  }\n}, ownerState.edge === 'start' && {\n  marginLeft: -8\n}, ownerState.edge === 'end' && {\n  marginRight: -8\n}, ownerState.size === 'small' && {\n  width: 40,\n  height: 24,\n  padding: 7,\n  [`& .${switchClasses.thumb}`]: {\n    width: 16,\n    height: 16\n  },\n  [`& .${switchClasses.switchBase}`]: {\n    padding: 4,\n    [`&.${switchClasses.checked}`]: {\n      transform: 'translateX(16px)'\n    }\n  }\n}));\nconst SwitchSwitchBase = styled(SwitchBase, {\n  name: 'MuiSwitch',\n  slot: 'SwitchBase',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.switchBase, {\n      [`& .${switchClasses.input}`]: styles.input\n    }, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme\n}) => ({\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  // Render above the focus ripple.\n  color: theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300],\n  transition: theme.transitions.create(['left', 'transform'], {\n    duration: theme.transitions.duration.shortest\n  }),\n  [`&.${switchClasses.checked}`]: {\n    transform: 'translateX(20px)'\n  },\n  [`&.${switchClasses.disabled}`]: {\n    color: theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]\n  },\n  [`&.${switchClasses.checked} + .${switchClasses.track}`]: {\n    opacity: 0.5\n  },\n  [`&.${switchClasses.disabled} + .${switchClasses.track}`]: {\n    opacity: theme.palette.mode === 'light' ? 0.12 : 0.2\n  },\n  [`& .${switchClasses.input}`]: {\n    left: '-100%',\n    width: '300%'\n  }\n}), ({\n  theme,\n  ownerState\n}) => _extends({\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${switchClasses.checked}`]: {\n    color: theme.palette[ownerState.color].main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    [`&.${switchClasses.disabled}`]: {\n      color: theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)\n    }\n  },\n  [`&.${switchClasses.checked} + .${switchClasses.track}`]: {\n    backgroundColor: theme.palette[ownerState.color].main\n  }\n}));\nconst SwitchTrack = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Track',\n  overridesResolver: (props, styles) => styles.track\n})(({\n  theme\n}) => ({\n  height: '100%',\n  width: '100%',\n  borderRadius: 14 / 2,\n  zIndex: -1,\n  transition: theme.transitions.create(['opacity', 'background-color'], {\n    duration: theme.transitions.duration.shortest\n  }),\n  backgroundColor: theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white,\n  opacity: theme.palette.mode === 'light' ? 0.38 : 0.3\n}));\nconst SwitchThumb = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Thumb',\n  overridesResolver: (props, styles) => styles.thumb\n})(({\n  theme\n}) => ({\n  boxShadow: theme.shadows[1],\n  backgroundColor: 'currentColor',\n  width: 20,\n  height: 20,\n  borderRadius: '50%'\n}));\nconst Switch = /*#__PURE__*/React.forwardRef(function Switch(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiSwitch'\n  });\n\n  const {\n    className,\n    color = 'primary',\n    edge = false,\n    size = 'medium',\n    sx\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    edge,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const icon = /*#__PURE__*/_jsx(SwitchThumb, {\n    className: classes.thumb,\n    ownerState: ownerState\n  });\n\n  return /*#__PURE__*/_jsxs(SwitchRoot, {\n    className: clsx(classes.root, className),\n    sx: sx,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(SwitchSwitchBase, _extends({\n      type: \"checkbox\",\n      icon: icon,\n      checkedIcon: icon,\n      ref: ref,\n      ownerState: ownerState\n    }, other, {\n      classes: _extends({}, classes, {\n        root: classes.switchBase\n      })\n    })), /*#__PURE__*/_jsx(SwitchTrack, {\n      className: classes.track,\n      ownerState: ownerState\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense switch styling.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Switch;","import { unstable_createChainedFunction as createChainedFunction } from '@mui/utils';\nexport default createChainedFunction;","import { unstable_deprecatedPropType as deprecatedPropType } from '@mui/utils';\nexport default deprecatedPropType;","export default function deprecatedPropType(validator, reason) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n\n  return (props, propName, componentName, location, propFullName) => {\n    const componentNameSafe = componentName || '<<anonymous>>';\n    const propFullNameSafe = propFullName || propName;\n\n    if (typeof props[propName] !== 'undefined') {\n      return new Error(`The ${location} \\`${propFullNameSafe}\\` of ` + `\\`${componentNameSafe}\\` is deprecated. ${reason}`);\n    }\n\n    return null;\n  };\n}","import { unstable_requirePropFactory as requirePropFactory } from '@mui/utils';\nexport default requirePropFactory;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport default function requirePropFactory(componentNameInError, Component) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  } // eslint-disable-next-line react/forbid-foreign-prop-types\n\n\n  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;\n\n  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {\n    const propFullNameSafe = propFullName || propName;\n    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];\n\n    if (defaultTypeChecker) {\n      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);\n\n      if (typeCheckerResult) {\n        return typeCheckerResult;\n      }\n    }\n\n    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {\n      return new Error(`The prop \\`${propFullNameSafe}\\` of ` + `\\`${componentNameInError}\\` can only be used together with the \\`${requiredProp}\\` prop.`);\n    }\n\n    return null;\n  };\n\n  return requireProp;\n}","import { unstable_setRef as setRef } from '@mui/utils';\nexport default setRef;","import { unstable_useId as useId } from '@mui/utils';\nexport default useId;","import { unstable_unsupportedProp as unsupportedProp } from '@mui/utils';\nexport default unsupportedProp;","export default function unsupportedProp(props, propName, componentName, location, propFullName) {\n  if (process.env.NODE_ENV === 'production') {\n    return null;\n  }\n\n  const propFullNameSafe = propFullName || propName;\n\n  if (typeof props[propName] !== 'undefined') {\n    return new Error(`The prop \\`${propFullNameSafe}\\` is not supported. Please remove it.`);\n  }\n\n  return null;\n}","import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/base/className';\nexport { default as capitalize } from './capitalize';\nexport { default as createChainedFunction } from './createChainedFunction';\nexport { default as createSvgIcon } from './createSvgIcon';\nexport { default as debounce } from './debounce';\nexport { default as deprecatedPropType } from './deprecatedPropType';\nexport { default as isMuiElement } from './isMuiElement';\nexport { default as ownerDocument } from './ownerDocument';\nexport { default as ownerWindow } from './ownerWindow';\nexport { default as requirePropFactory } from './requirePropFactory';\nexport { default as setRef } from './setRef';\nexport { default as unstable_useEnhancedEffect } from './useEnhancedEffect';\nexport { default as unstable_useId } from './useId';\nexport { default as unsupportedProp } from './unsupportedProp';\nexport { default as useControlled } from './useControlled';\nexport { default as useEventCallback } from './useEventCallback';\nexport { default as useForkRef } from './useForkRef';\nexport { default as useIsFocusVisible } from './useIsFocusVisible'; // TODO: remove this export once ClassNameGenerator is stable\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_ClassNameGenerator = {\n  configure: generator => {\n    console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', \"You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead\", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\\n'));\n    ClassNameGenerator.configure(generator);\n  }\n};","/*! Fast Average Color | © 2022 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n    var str = num.toString(16);\n    return str.length === 1 ? '0' + str : str;\n}\nfunction arrayToHex(arr) {\n    return '#' + arr.map(toHex).join('');\n}\nfunction isDark(color) {\n    // http://www.w3.org/TR/AERT#color-contrast\n    var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n    return result < 128;\n}\nfunction prepareIgnoredColor(color) {\n    if (!color) {\n        return [];\n    }\n    return isRGBArray(color) ? color : [color];\n}\nfunction isRGBArray(value) {\n    return Array.isArray(value[0]);\n}\nfunction isIgnoredColor(data, index, ignoredColor) {\n    for (var i = 0; i < ignoredColor.length; i++) {\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n    switch (ignoredColor.length) {\n        case 3:\n            // [red, green, blue]\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        case 4:\n            // [red, green, blue, alpha]\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        case 5:\n            // [red, green, blue, alpha, threshold]\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        default:\n            return false;\n    }\n}\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n    // Ignore if the pixel are transparent.\n    if (data[index + 3] !== 255) {\n        return true;\n    }\n    if (data[index] === ignoredColor[0] &&\n        data[index + 1] === ignoredColor[1] &&\n        data[index + 2] === ignoredColor[2]) {\n        return true;\n    }\n    return false;\n}\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n    if (data[index + 3] && ignoredColor[3]) {\n        return data[index] === ignoredColor[0] &&\n            data[index + 1] === ignoredColor[1] &&\n            data[index + 2] === ignoredColor[2] &&\n            data[index + 3] === ignoredColor[3];\n    }\n    // Ignore rgb components if the pixel are fully transparent.\n    return data[index + 3] === ignoredColor[3];\n}\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n    return colorComponent >= (ignoredColorComponent - value) &&\n        colorComponent <= (ignoredColorComponent + value);\n}\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n    var redIgnored = ignoredColor[0];\n    var greenIgnored = ignoredColor[1];\n    var blueIgnored = ignoredColor[2];\n    var alphaIgnored = ignoredColor[3];\n    var threshold = ignoredColor[4];\n    var alphaData = data[index + 3];\n    var alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n    if (!alphaIgnored) {\n        return alphaInRange;\n    }\n    if (!alphaData && alphaInRange) {\n        return true;\n    }\n    if (inRange(data[index], redIgnored, threshold) &&\n        inRange(data[index + 1], greenIgnored, threshold) &&\n        inRange(data[index + 2], blueIgnored, threshold) &&\n        alphaInRange) {\n        return true;\n    }\n    return false;\n}\n\nfunction dominantAlgorithm(arr, len, options) {\n    var colorHash = {};\n    var divider = 24;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    var max = [0, 0, 0, 0, 0];\n    for (var i = 0; i < len; i += step) {\n        var red = arr[i];\n        var green = arr[i + 1];\n        var blue = arr[i + 2];\n        var alpha = arr[i + 3];\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        var key = Math.round(red / divider) + ',' +\n            Math.round(green / divider) + ',' +\n            Math.round(blue / divider);\n        if (colorHash[key]) {\n            colorHash[key] = [\n                colorHash[key][0] + red * alpha,\n                colorHash[key][1] + green * alpha,\n                colorHash[key][2] + blue * alpha,\n                colorHash[key][3] + alpha,\n                colorHash[key][4] + 1\n            ];\n        }\n        else {\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n        }\n        if (max[4] < colorHash[key][4]) {\n            max = colorHash[key];\n        }\n    }\n    var redTotal = max[0];\n    var greenTotal = max[1];\n    var blueTotal = max[2];\n    var alphaTotal = max[3];\n    var count = max[4];\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n    var redTotal = 0;\n    var greenTotal = 0;\n    var blueTotal = 0;\n    var alphaTotal = 0;\n    var count = 0;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    for (var i = 0; i < len; i += step) {\n        var alpha = arr[i + 3];\n        var red = arr[i] * alpha;\n        var green = arr[i + 1] * alpha;\n        var blue = arr[i + 2] * alpha;\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        redTotal += red;\n        greenTotal += green;\n        blueTotal += blue;\n        alphaTotal += alpha;\n        count++;\n    }\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n    var redTotal = 0;\n    var greenTotal = 0;\n    var blueTotal = 0;\n    var alphaTotal = 0;\n    var count = 0;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    for (var i = 0; i < len; i += step) {\n        var red = arr[i];\n        var green = arr[i + 1];\n        var blue = arr[i + 2];\n        var alpha = arr[i + 3];\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        redTotal += red * red * alpha;\n        greenTotal += green * green * alpha;\n        blueTotal += blue * blue * alpha;\n        alphaTotal += alpha;\n        count++;\n    }\n    return alphaTotal ? [\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\nfunction getOption(options, name, defaultValue) {\n    return (options[name] === undefined ? defaultValue : options[name]);\n}\n\nvar MIN_SIZE = 10;\nvar MAX_SIZE = 100;\nfunction isSvg(filename) {\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\nfunction getOriginalSize(resource) {\n    if (isInstanceOfHTMLImageElement(resource)) {\n        var width = resource.naturalWidth;\n        var height = resource.naturalHeight;\n        // For SVG images with only viewBox attribute\n        if (!resource.naturalWidth && isSvg(resource.src)) {\n            width = height = MAX_SIZE;\n        }\n        return {\n            width: width,\n            height: height,\n        };\n    }\n    if (isInstanceOfHTMLVideoElement(resource)) {\n        return {\n            width: resource.videoWidth,\n            height: resource.videoHeight\n        };\n    }\n    return {\n        width: resource.width,\n        height: resource.height\n    };\n}\nfunction getSrc(resource) {\n    if (isInstanceOfHTMLCanvasElement(resource)) {\n        return 'canvas';\n    }\n    if (isInstanceOfOffscreenCanvas(resource)) {\n        return 'offscreencanvas';\n    }\n    if (isInstanceOfImageBitmap(resource)) {\n        return 'imagebitmap';\n    }\n    return resource.src;\n}\nfunction isInstanceOfHTMLImageElement(resource) {\n    return typeof HTMLImageElement !== 'undefined' && resource instanceof HTMLImageElement;\n}\nfunction isInstanceOfOffscreenCanvas(resource) {\n    return typeof OffscreenCanvas !== 'undefined' && resource instanceof OffscreenCanvas;\n}\nfunction isInstanceOfHTMLVideoElement(resource) {\n    return typeof HTMLVideoElement !== 'undefined' && resource instanceof HTMLVideoElement;\n}\nfunction isInstanceOfHTMLCanvasElement(resource) {\n    return typeof HTMLCanvasElement !== 'undefined' && resource instanceof HTMLCanvasElement;\n}\nfunction isInstanceOfImageBitmap(resource) {\n    return typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap;\n}\nfunction prepareSizeAndPosition(originalSize, options) {\n    var srcLeft = getOption(options, 'left', 0);\n    var srcTop = getOption(options, 'top', 0);\n    var srcWidth = getOption(options, 'width', originalSize.width);\n    var srcHeight = getOption(options, 'height', originalSize.height);\n    var destWidth = srcWidth;\n    var destHeight = srcHeight;\n    if (options.mode === 'precision') {\n        return {\n            srcLeft: srcLeft,\n            srcTop: srcTop,\n            srcWidth: srcWidth,\n            srcHeight: srcHeight,\n            destWidth: destWidth,\n            destHeight: destHeight\n        };\n    }\n    var factor;\n    if (srcWidth > srcHeight) {\n        factor = srcWidth / srcHeight;\n        destWidth = MAX_SIZE;\n        destHeight = Math.round(destWidth / factor);\n    }\n    else {\n        factor = srcHeight / srcWidth;\n        destHeight = MAX_SIZE;\n        destWidth = Math.round(destHeight / factor);\n    }\n    if (destWidth > srcWidth || destHeight > srcHeight ||\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n        destWidth = srcWidth;\n        destHeight = srcHeight;\n    }\n    return {\n        srcLeft: srcLeft,\n        srcTop: srcTop,\n        srcWidth: srcWidth,\n        srcHeight: srcHeight,\n        destWidth: destWidth,\n        destHeight: destHeight\n    };\n}\nvar isWebWorkers = typeof window === 'undefined';\nfunction makeCanvas() {\n    return isWebWorkers ?\n        new OffscreenCanvas(1, 1) :\n        document.createElement('canvas');\n}\n\nvar ERROR_PREFIX = 'FastAverageColor: ';\nfunction outputError(message, silent, error) {\n    if (!silent) {\n        console.error(ERROR_PREFIX + message);\n        if (error) {\n            console.error(error);\n        }\n    }\n}\nfunction getError(text) {\n    return Error(ERROR_PREFIX + text);\n}\n\nvar FastAverageColor = /** @class */ (function () {\n    function FastAverageColor() {\n        this.canvas = null;\n        this.ctx = null;\n    }\n    /**\n     * Get asynchronously the average color from not loaded image.\n     */\n    FastAverageColor.prototype.getColorAsync = function (resource, options) {\n        if (!resource) {\n            return Promise.reject(getError('call .getColorAsync() without resource.'));\n        }\n        if (typeof resource === 'string') {\n            // Web workers\n            if (typeof Image === 'undefined') {\n                return Promise.reject(getError('resource as string is not supported in this environment'));\n            }\n            var img = new Image();\n            img.crossOrigin = options && options.crossOrigin || '';\n            img.src = resource;\n            return this.bindImageEvents(img, options);\n        }\n        else if (isInstanceOfHTMLImageElement(resource) && !resource.complete) {\n            return this.bindImageEvents(resource, options);\n        }\n        else {\n            var result = this.getColor(resource, options);\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n        }\n    };\n    /**\n     * Get the average color from images, videos and canvas.\n     */\n    FastAverageColor.prototype.getColor = function (resource, options) {\n        options = options || {};\n        var defaultColor = getDefaultColor(options);\n        if (!resource) {\n            outputError('call .getColor(null) without resource', options.silent);\n            return this.prepareResult(defaultColor);\n        }\n        var originalSize = getOriginalSize(resource);\n        var size = prepareSizeAndPosition(originalSize, options);\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n            outputError(\"incorrect sizes for resource \\\"\".concat(getSrc(resource), \"\\\"\"), options.silent);\n            return this.prepareResult(defaultColor);\n        }\n        if (!this.canvas) {\n            this.canvas = makeCanvas();\n        }\n        if (!this.ctx) {\n            this.ctx = this.canvas.getContext && this.canvas.getContext('2d');\n            if (!this.ctx) {\n                outputError('Canvas Context 2D is not supported in this browser', options.silent);\n                return this.prepareResult(defaultColor);\n            }\n        }\n        this.canvas.width = size.destWidth;\n        this.canvas.height = size.destHeight;\n        var value = defaultColor;\n        try {\n            this.ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n            this.ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n            var bitmapData = this.ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n            value = this.getColorFromArray4(bitmapData, options);\n        }\n        catch (e) {\n            outputError(\"security error (CORS) for resource \".concat(getSrc(resource), \".\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image\"), options.silent, e);\n        }\n        return this.prepareResult(value);\n    };\n    /**\n     * Get the average color from a array when 1 pixel is 4 bytes.\n     */\n    FastAverageColor.prototype.getColorFromArray4 = function (arr, options) {\n        options = options || {};\n        var bytesPerPixel = 4;\n        var arrLength = arr.length;\n        var defaultColor = getDefaultColor(options);\n        if (arrLength < bytesPerPixel) {\n            return defaultColor;\n        }\n        var len = arrLength - arrLength % bytesPerPixel;\n        var step = (options.step || 1) * bytesPerPixel;\n        var algorithm;\n        switch (options.algorithm || 'sqrt') {\n            case 'simple':\n                algorithm = simpleAlgorithm;\n                break;\n            case 'sqrt':\n                algorithm = sqrtAlgorithm;\n                break;\n            case 'dominant':\n                algorithm = dominantAlgorithm;\n                break;\n            default:\n                throw getError(\"\".concat(options.algorithm, \" is unknown algorithm\"));\n        }\n        return algorithm(arr, len, {\n            defaultColor: defaultColor,\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\n            step: step\n        });\n    };\n    /**\n     * Get color data from value ([r, g, b, a]).\n     */\n    FastAverageColor.prototype.prepareResult = function (value) {\n        var rgb = value.slice(0, 3);\n        var rgba = [value[0], value[1], value[2], value[3] / 255];\n        var isDarkColor = isDark(value);\n        return {\n            value: [value[0], value[1], value[2], value[3]],\n            rgb: 'rgb(' + rgb.join(',') + ')',\n            rgba: 'rgba(' + rgba.join(',') + ')',\n            hex: arrayToHex(rgb),\n            hexa: arrayToHex(value),\n            isDark: isDarkColor,\n            isLight: !isDarkColor\n        };\n    };\n    /**\n     * Destroy the instance.\n     */\n    FastAverageColor.prototype.destroy = function () {\n        if (this.canvas) {\n            this.canvas.width = 1;\n            this.canvas.height = 1;\n            this.canvas = null;\n        }\n        this.ctx = null;\n    };\n    FastAverageColor.prototype.bindImageEvents = function (resource, options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var onload = function () {\n                unbindEvents();\n                var result = _this.getColor(resource, options);\n                if (result.error) {\n                    reject(result.error);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            var onerror = function () {\n                unbindEvents();\n                reject(getError(\"Error loading image \\\"\".concat(resource.src, \"\\\".\")));\n            };\n            var onabort = function () {\n                unbindEvents();\n                reject(getError(\"Image \\\"\".concat(resource.src, \"\\\" loading aborted\")));\n            };\n            var unbindEvents = function () {\n                resource.removeEventListener('load', onload);\n                resource.removeEventListener('error', onerror);\n                resource.removeEventListener('abort', onabort);\n            };\n            resource.addEventListener('load', onload);\n            resource.addEventListener('error', onerror);\n            resource.addEventListener('abort', onabort);\n        });\n    };\n    return FastAverageColor;\n}());\n\nexport { FastAverageColor };\n","// @flow\nconst errorPrefix = 'PushError:';\n\nexport default {\n    errors: {\n        incompatible: `${errorPrefix} Push.js is incompatible with browser.`,\n        invalid_plugin: `${errorPrefix} plugin class missing from plugin manifest (invalid plugin). Please check the documentation.`,\n        invalid_title: `${errorPrefix} title of notification must be a string`,\n        permission_denied: `${errorPrefix} permission request declined`,\n        sw_notification_error: `${errorPrefix} could not show a ServiceWorker notification due to the following reason: `,\n        sw_registration_error: `${errorPrefix} could not register the ServiceWorker due to the following reason: `,\n        unknown_interface: `${errorPrefix} unable to create notification: unknown interface`\n    }\n};\n","// @flow\nimport type { Global } from 'types';\n\nexport default class Permission {\n    // Private members\n    _permissions: string[];\n    _win: Global;\n\n    // Public members\n    GRANTED: string;\n    DEFAULT: string;\n    DENIED: string;\n\n    constructor(win: Global) {\n        this._win = win;\n        this.GRANTED = 'granted';\n        this.DEFAULT = 'default';\n        this.DENIED = 'denied';\n        this._permissions = [this.GRANTED, this.DEFAULT, this.DENIED];\n    }\n\n    /**\n   * Requests permission for desktop notifications\n   * @param {Function} onGranted - Function to execute once permission is granted\n   * @param {Function} onDenied - Function to execute once permission is denied\n   * @return {void, Promise}\n   */\n    request(onGranted: () => void, onDenied: () => void) {\n        return arguments.length > 0\n            ? this._requestWithCallback(...arguments)\n            : this._requestAsPromise();\n    }\n\n    /**\n   * Old permissions implementation deprecated in favor of a promise based one\n   * @deprecated Since V1.0.4\n   * @param {Function} onGranted - Function to execute once permission is granted\n   * @param {Function} onDenied - Function to execute once permission is denied\n   * @return {void}\n   */\n    _requestWithCallback(onGranted: () => void, onDenied: () => void) {\n        const existing = this.get();\n\n        var resolved = false;\n        var resolve = (result = this._win.Notification.permission) => {\n            if (resolved) return;\n            resolved = true;\n            if (typeof result === 'undefined' && this._win.webkitNotifications)\n                result = this._win.webkitNotifications.checkPermission();\n            if (result === this.GRANTED || result === 0) {\n                if (onGranted) onGranted();\n            } else if (onDenied) onDenied();\n        };\n        var request;\n\n        /* Permissions already set */\n        if (existing !== this.DEFAULT) {\n            resolve(existing);\n        } else if (\n            this._win.webkitNotifications &&\n            this._win.webkitNotifications.checkPermission\n        ) {\n            /* Safari 6+, Legacy webkit browsers */\n            this._win.webkitNotifications.requestPermission(resolve);\n        } else if (\n            this._win.Notification &&\n            this._win.Notification.requestPermission\n        ) {\n            /* Safari 12+ */\n            /* This resolve argument will only be used in Safari */\n            /* CHrome, instead, returns a Promise */\n            request = this._win.Notification.requestPermission(resolve);\n            if (request && request.then) {\n                /* Chrome 23+ */\n                request.then(resolve).catch(function() {\n                    if (onDenied) onDenied();\n                });\n            }\n        } else if (onGranted) {\n            /* Let the user continue by default */\n            onGranted();\n        }\n    }\n\n    /**\n   * Requests permission for desktop notifications in a promise based way\n   * @return {Promise}\n   */\n    _requestAsPromise(): Promise<void> {\n        const existing = this.get();\n\n        let isGranted = result => result === this.GRANTED || result === 0;\n\n        /* Permissions already set */\n        var hasPermissions = existing !== this.DEFAULT;\n\n        /* Safari 6+, Chrome 23+ */\n        var isModernAPI =\n            this._win.Notification && this._win.Notification.requestPermission;\n\n        /* Legacy webkit browsers */\n        var isWebkitAPI =\n            this._win.webkitNotifications &&\n            this._win.webkitNotifications.checkPermission;\n\n        return new Promise((resolvePromise, rejectPromise) => {\n            var resolved = false;\n            var resolver = result => {\n                if (resolved) return;\n                resolved = true;\n                isGranted(result) ? resolvePromise() : rejectPromise();\n            };\n            var request;\n\n            if (hasPermissions) {\n                resolver(existing);\n            } else if (isWebkitAPI) {\n                this._win.webkitNotifications.requestPermission(result => {\n                    resolver(result);\n                });\n            } else if (isModernAPI) {\n                /* Safari 12+ */\n                /* This resolver argument will only be used in Safari */\n                /* CHrome, instead, returns a Promise */\n                request = this._win.Notification.requestPermission(resolver);\n                if (request && request.then) {\n                    /* Chrome 23+ */\n                    request.then(resolver).catch(rejectPromise);\n                }\n            } else resolvePromise();\n        });\n    }\n\n    /**\n   * Returns whether Push has been granted permission to run\n   * @return {Boolean}\n   */\n    has() {\n        return this.get() === this.GRANTED;\n    }\n\n    /**\n   * Gets the permission level\n   * @return {Permission} The permission level\n   */\n    get() {\n        let permission;\n\n        /* Safari 6+, Chrome 23+ */\n        if (this._win.Notification && this._win.Notification.permission)\n            permission = this._win.Notification.permission;\n        else if (\n            this._win.webkitNotifications &&\n            this._win.webkitNotifications.checkPermission\n        )\n            /* Legacy webkit browsers */\n            permission = this._permissions[\n                this._win.webkitNotifications.checkPermission()\n            ];\n        else if (navigator.mozNotification)\n            /* Firefox Mobile */\n            permission = this.GRANTED;\n        else if (this._win.external && this._win.external.msIsSiteMode)\n            /* IE9+ */\n            permission = this._win.external.msIsSiteMode()\n                ? this.GRANTED\n                : this.DEFAULT;\n        else permission = this.GRANTED;\n\n        return permission;\n    }\n}\n","// @flow\nexport default class Util {\n    static isUndefined(obj) {\n        return obj === undefined;\n    }\n\n    static isNull(obs) {\n        return obj === null;\n    }\n\n    static isString(obj) {\n        return typeof obj === 'string';\n    }\n\n    static isFunction(obj) {\n        return obj && {}.toString.call(obj) === '[object Function]';\n    }\n\n    static isObject(obj) {\n        return typeof obj === 'object';\n    }\n\n    static objectMerge(target, source) {\n        for (var key in source) {\n            if (\n                target.hasOwnProperty(key) &&\n                this.isObject(target[key]) &&\n                this.isObject(source[key])\n            ) {\n                this.objectMerge(target[key], source[key]);\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n}\n","// @flow\nimport type { Global } from 'types';\n\nexport default class AbstractAgent {\n    _win: Global;\n\n    constructor(win: Global) {\n        this._win = win;\n    }\n}\n","// @flow\nimport { AbstractAgent } from 'agents';\nimport { Util } from 'push';\nimport type { PushOptions, GenericNotification, Global } from 'types';\n\n/**\n * Notification agent for modern desktop browsers:\n * Safari 6+, Firefox 22+, Chrome 22+, Opera 25+\n */\nexport default class DesktopAgent extends AbstractAgent {\n    _win: Global;\n\n    /**\n     * Returns a boolean denoting support\n     * @returns {Boolean} boolean denoting whether webkit notifications are supported\n     */\n    isSupported() {\n        return this._win.Notification !== undefined;\n    }\n\n    /**\n     * Creates a new notification\n     * @param title - notification title\n     * @param options - notification options array\n     * @returns {Notification}\n     */\n    create(title: string, options: PushOptions) {\n        return new this._win.Notification(title, {\n            icon:\n                Util.isString(options.icon) ||\n                Util.isUndefined(options.icon) ||\n                Util.isNull(options.icon)\n                    ? options.icon\n                    : options.icon.x32,\n            body: options.body,\n            tag: options.tag,\n            requireInteraction: options.requireInteraction\n        });\n    }\n\n    /**\n     * Close a given notification\n     * @param notification - notification to close\n     */\n    close(notification: GenericNotification) {\n        notification.close();\n    }\n}\n","// @flow\nimport { Util, Messages } from 'push';\nimport { AbstractAgent } from 'agents';\nimport type { Global, GenericNotification, PushOptions } from 'types';\n\n/**\n * Notification agent for modern desktop browsers:\n * Safari 6+, Firefox 22+, Chrome 22+, Opera 25+\n */\nexport default class MobileChromeAgent extends AbstractAgent {\n    _win: Global;\n\n    /**\n     * Returns a boolean denoting support\n     * @returns {Boolean} boolean denoting whether webkit notifications are supported\n     */\n    isSupported() {\n        return (\n            this._win.navigator !== undefined &&\n            this._win.navigator.serviceWorker !== undefined\n        );\n    }\n\n    /**\n     * Returns the function body as a string\n     * @param func\n     */\n    getFunctionBody(func: () => void) {\n        const str = func.toString().match(/function[^{]+{([\\s\\S]*)}$/);\n        return typeof str !== 'undefined' && str !== null && str.length > 1\n            ? str[1]\n            : null;\n    }\n\n    /**\n     * Creates a new notification\n     * @param id                ID of notification\n     * @param title             Title of notification\n     * @param options           Options object\n     * @param serviceWorker     ServiceWorker path\n     * @param callback          Callback function\n     */\n    create(\n        id: number,\n        title: string,\n        options: PushOptions,\n        serviceWorker: string,\n        callback: (GenericNotification[]) => void\n    ) {\n        /* Register ServiceWorker */\n        this._win.navigator.serviceWorker.register(serviceWorker);\n\n        this._win.navigator.serviceWorker.ready\n            .then(registration => {\n                /* Local data the service worker will use */\n                let localData = {\n                    id: id,\n                    link: options.link,\n                    origin: document.location.href,\n                    onClick: Util.isFunction(options.onClick)\n                        ? this.getFunctionBody(options.onClick)\n                        : '',\n                    onClose: Util.isFunction(options.onClose)\n                        ? this.getFunctionBody(options.onClose)\n                        : ''\n                };\n\n                /* Merge the local data with user-provided data */\n                if (options.data !== undefined && options.data !== null)\n                    localData = Object.assign(localData, options.data);\n\n                /* Show the notification */\n                registration\n                    .showNotification(title, {\n                        icon: options.icon,\n                        body: options.body,\n                        vibrate: options.vibrate,\n                        tag: options.tag,\n                        data: localData,\n                        requireInteraction: options.requireInteraction,\n                        silent: options.silent\n                    })\n                    .then(() => {\n                        registration.getNotifications().then(notifications => {\n                            /* Send an empty message so the ServiceWorker knows who the client is */\n                            registration.active.postMessage('');\n\n                            /* Trigger callback */\n                            callback(notifications);\n                        });\n                    })\n                    .catch(function(error) {\n                        throw new Error(\n                            Messages.errors.sw_notification_error +\n                                error.message\n                        );\n                    });\n            })\n            .catch(function(error) {\n                throw new Error(\n                    Messages.errors.sw_registration_error + error.message\n                );\n            });\n    }\n\n    /**\n     * Close all notification\n     */\n    close() {\n        // Can't do this with service workers\n    }\n}\n","// @flow\nimport { AbstractAgent } from 'agents';\nimport type { Global, PushOptions } from 'types';\n\n/**\n * Notification agent for modern desktop browsers:\n * Safari 6+, Firefox 22+, Chrome 22+, Opera 25+\n */\nexport default class MobileFirefoxAgent extends AbstractAgent {\n    _win: Global;\n\n    /**\n     * Returns a boolean denoting support\n     * @returns {Boolean} boolean denoting whether webkit notifications are supported\n     */\n    isSupported() {\n        return this._win.navigator.mozNotification !== undefined;\n    }\n\n    /**\n     * Creates a new notification\n     * @param title - notification title\n     * @param options - notification options array\n     * @returns {Notification}\n     */\n    create(title: string, options: PushOptions) {\n        let notification = this._win.navigator.mozNotification.createNotification(\n            title,\n            options.body,\n            options.icon\n        );\n\n        notification.show();\n\n        return notification;\n    }\n}\n","// @flow\nimport { AbstractAgent } from 'agents';\nimport { Util } from 'push';\nimport type { PushOptions, Global } from 'types';\n\n/**\n * Notification agent for IE9\n */\nexport default class MSAgent extends AbstractAgent {\n    _win: Global;\n\n    /**\n     * Returns a boolean denoting support\n     * @returns {Boolean} boolean denoting whether webkit notifications are supported\n     */\n    isSupported() {\n        return (\n            this._win.external !== undefined &&\n            this._win.external.msIsSiteMode !== undefined\n        );\n    }\n\n    /**\n     * Creates a new notification\n     * @param title - notification title\n     * @param options - notification options array\n     * @returns {Notification}\n     */\n    create(title: string, options: PushOptions) {\n        /* Clear any previous notifications */\n        this._win.external.msSiteModeClearIconOverlay();\n\n        this._win.external.msSiteModeSetIconOverlay(\n            Util.isString(options.icon) || Util.isUndefined(options.icon)\n                ? options.icon\n                : options.icon.x16,\n            title\n        );\n\n        this._win.external.msSiteModeActivate();\n\n        return null;\n    }\n\n    /**\n     * Close a given notification\n     * @param notification - notification to close\n     */\n    close() {\n        this._win.external.msSiteModeClearIconOverlay();\n    }\n}\n","// @flow\nimport { AbstractAgent } from 'agents';\nimport type { Global, GenericNotification, PushOptions } from 'types';\n\n/**\n * Notification agent for old Chrome versions (and some) Firefox\n */\nexport default class WebKitAgent extends AbstractAgent {\n    _win: Global;\n\n    /**\n     * Returns a boolean denoting support\n     * @returns {Boolean} boolean denoting whether webkit notifications are supported\n     */\n    isSupported() {\n        return this._win.webkitNotifications !== undefined;\n    }\n\n    /**\n     * Creates a new notification\n     * @param title - notification title\n     * @param options - notification options array\n     * @returns {Notification}\n     */\n    create(title: string, options: PushOptions) {\n        let notification = this._win.webkitNotifications.createNotification(\n            options.icon,\n            title,\n            options.body\n        );\n\n        notification.show();\n\n        return notification;\n    }\n\n    /**\n     * Close a given notification\n     * @param notification - notification to close\n     */\n    close(notification: GenericNotification) {\n        notification.cancel();\n    }\n}\n","// @flow\nimport { Push } from 'push';\n\nexport default new Push(typeof window !== 'undefined' ? window : global);\n","// @flow\nimport { Messages, Permission, Util } from 'push';\nimport type { PluginManifest, GenericNotification, PushOptions } from 'types';\n\n/* Import notification agents */\nimport {\n    DesktopAgent,\n    MobileChromeAgent,\n    MobileFirefoxAgent,\n    MSAgent,\n    WebKitAgent\n} from 'agents';\n\nexport default class Push {\n    // Private members\n    _agents: {\n        desktop: DesktopAgent,\n        chrome: MobileChromeAgent,\n        firefox: MobileFirefoxAgent,\n        ms: MSAgent,\n        webkit: WebKitAgent\n    };\n    _configuration: {\n        serviceWorker: string,\n        fallback: ({}) => void\n    };\n    _currentId: number;\n    _notifications: {};\n    _win: {};\n\n    // Public members\n    Permission: Permission;\n\n    constructor(win: {}) {\n        /* Private variables */\n\n        /* ID to use for new notifications */\n        this._currentId = 0;\n\n        /* Map of open notifications */\n        this._notifications = {};\n\n        /* Window object */\n        this._win = win;\n\n        /* Public variables */\n        this.Permission = new Permission(win);\n\n        /* Agents */\n        this._agents = {\n            desktop: new DesktopAgent(win),\n            chrome: new MobileChromeAgent(win),\n            firefox: new MobileFirefoxAgent(win),\n            ms: new MSAgent(win),\n            webkit: new WebKitAgent(win)\n        };\n\n        this._configuration = {\n            serviceWorker: '/serviceWorker.min.js',\n            fallback: function(payload) {}\n        };\n    }\n\n    /**\n     * Closes a notification\n     * @param id            ID of notification\n     * @returns {boolean}   denotes whether the operation was successful\n     * @private\n     */\n    _closeNotification(id: number | string) {\n        let success = true;\n        const notification = this._notifications[id];\n\n        if (notification !== undefined) {\n            success = this._removeNotification(id);\n\n            /* Safari 6+, Firefox 22+, Chrome 22+, Opera 25+ */\n            if (this._agents.desktop.isSupported())\n                this._agents.desktop.close(notification);\n            else if (this._agents.webkit.isSupported())\n                /* Legacy WebKit browsers */\n                this._agents.webkit.close(notification);\n            else if (this._agents.ms.isSupported())\n                /* IE9 */\n                this._agents.ms.close();\n            else {\n                success = false;\n                throw new Error(Messages.errors.unknown_interface);\n            }\n\n            return success;\n        }\n\n        return false;\n    }\n\n    /**\n   * Adds a notification to the global dictionary of notifications\n   * @param {Notification} notification\n   * @return {Integer} Dictionary key of the notification\n   * @private\n   */\n    _addNotification(notification: GenericNotification) {\n        const id = this._currentId;\n        this._notifications[id] = notification;\n        this._currentId++;\n        return id;\n    }\n\n    /**\n   * Removes a notification with the given ID\n   * @param  {Integer} id - Dictionary key/ID of the notification to remove\n   * @return {Boolean} boolean denoting success\n   * @private\n   */\n    _removeNotification(id: number | string) {\n        let success = false;\n\n        if (this._notifications.hasOwnProperty(id)) {\n            /* We're successful if we omit the given ID from the new array */\n            delete this._notifications[id];\n            success = true;\n        }\n\n        return success;\n    }\n\n    /**\n   * Creates the wrapper for a given notification\n   *\n   * @param {Integer} id - Dictionary key/ID of the notification\n   * @param {Map} options - Options used to create the notification\n   * @returns {Map} wrapper hashmap object\n   * @private\n   */\n    _prepareNotification(id: number, options: PushOptions) {\n        let wrapper;\n\n        /* Wrapper used to get/close notification later on */\n        wrapper = {\n            get: () => {\n                return this._notifications[id];\n            },\n\n            close: () => {\n                this._closeNotification(id);\n            }\n        };\n\n        /* Autoclose timeout */\n        if (options.timeout) {\n            setTimeout(() => {\n                wrapper.close();\n            }, options.timeout);\n        }\n\n        return wrapper;\n    }\n\n    /**\n   * Find the most recent notification from a ServiceWorker and add it to the global array\n   * @param notifications\n   * @private\n   */\n    _serviceWorkerCallback(\n        notifications: GenericNotification[],\n        options: PushOptions,\n        resolve: ({} | null) => void\n    ) {\n        let id = this._addNotification(notifications[notifications.length - 1]);\n\n        /* Listen for close requests from the ServiceWorker */\n        if (navigator && navigator.serviceWorker) {\n            navigator.serviceWorker.addEventListener('message', event => {\n                const data = JSON.parse(event.data);\n\n                if (data.action === 'close' && Number.isInteger(data.id))\n                    this._removeNotification(data.id);\n            });\n\n            resolve(this._prepareNotification(id, options));\n        }\n\n        resolve(null);\n    }\n\n    /**\n   * Callback function for the 'create' method\n   * @return {void}\n   * @private\n   */\n    _createCallback(\n        title: string,\n        options: PushOptions,\n        resolve: ({} | null) => void\n    ) {\n        let notification = null;\n        let onClose;\n\n        /* Set empty settings if none are specified */\n        options = options || {};\n\n        /* onClose event handler */\n        onClose = id => {\n            /* A bit redundant, but covers the cases when close() isn't explicitly called */\n            this._removeNotification(id);\n            if (Util.isFunction(options.onClose)) {\n                options.onClose.call(this, notification);\n            }\n        };\n\n        /* Safari 6+, Firefox 22+, Chrome 22+, Opera 25+ */\n        if (this._agents.desktop.isSupported()) {\n            try {\n                /* Create a notification using the API if possible */\n                notification = this._agents.desktop.create(title, options);\n            } catch (e) {\n                const id = this._currentId;\n                const sw = this.config().serviceWorker;\n                const cb = notifications =>\n                    this._serviceWorkerCallback(\n                        notifications,\n                        options,\n                        resolve\n                    );\n                /* Create a Chrome ServiceWorker notification if it isn't supported */\n                if (this._agents.chrome.isSupported()) {\n                    this._agents.chrome.create(id, title, options, sw, cb);\n                }\n            }\n            /* Legacy WebKit browsers */\n        } else if (this._agents.webkit.isSupported())\n            notification = this._agents.webkit.create(title, options);\n        else if (this._agents.firefox.isSupported())\n            /* Firefox Mobile */\n            this._agents.firefox.create(title, options);\n        else if (this._agents.ms.isSupported())\n            /* IE9 */\n            notification = this._agents.ms.create(title, options);\n        else {\n            /* Default fallback */\n            options.title = title;\n            this.config().fallback(options);\n        }\n\n        if (notification !== null) {\n            const id = this._addNotification(notification);\n            const wrapper = this._prepareNotification(id, options);\n\n            /* Notification callbacks */\n            if (Util.isFunction(options.onShow))\n                notification.addEventListener('show', options.onShow);\n\n            if (Util.isFunction(options.onError))\n                notification.addEventListener('error', options.onError);\n\n            if (Util.isFunction(options.onClick))\n                notification.addEventListener('click', options.onClick);\n\n            notification.addEventListener('close', () => {\n                onClose(id);\n            });\n\n            notification.addEventListener('cancel', () => {\n                onClose(id);\n            });\n\n            /* Return the wrapper so the user can call close() */\n            resolve(wrapper);\n        }\n\n        /* By default, pass an empty wrapper */\n        resolve(null);\n    }\n\n    /**\n   * Creates and displays a new notification\n   * @param {Array} options\n   * @return {Promise}\n   */\n    create(title: string, options: {}): Promise<void> {\n        let promiseCallback;\n\n        /* Fail if no or an invalid title is provided */\n        if (!Util.isString(title)) {\n            throw new Error(Messages.errors.invalid_title);\n        }\n\n        /* Request permission if it isn't granted */\n        if (!this.Permission.has()) {\n            promiseCallback = (resolve: () => void, reject: string => void) => {\n                this.Permission\n                    .request()\n                    .then(() => {\n                        this._createCallback(title, options, resolve);\n                    })\n                    .catch(() => {\n                        reject(Messages.errors.permission_denied);\n                    });\n            };\n        } else {\n            promiseCallback = (resolve: () => void, reject: string => void) => {\n                try {\n                    this._createCallback(title, options, resolve);\n                } catch (e) {\n                    reject(e);\n                }\n            };\n        }\n\n        return new Promise(promiseCallback);\n    }\n\n    /**\n   * Returns the notification count\n   * @return {Integer} The notification count\n   */\n    count() {\n        let count = 0;\n        let key;\n\n        for (key in this._notifications)\n            if (this._notifications.hasOwnProperty(key)) count++;\n\n        return count;\n    }\n\n    /**\n   * Closes a notification with the given tag\n   * @param {String} tag - Tag of the notification to close\n   * @return {Boolean} boolean denoting success\n   */\n    close(tag: string) {\n        let key, notification;\n\n        for (key in this._notifications) {\n            if (this._notifications.hasOwnProperty(key)) {\n                notification = this._notifications[key];\n\n                /* Run only if the tags match */\n                if (notification.tag === tag) {\n                    /* Call the notification's close() method */\n                    return this._closeNotification(key);\n                }\n            }\n        }\n    }\n\n    /**\n   * Clears all notifications\n   * @return {Boolean} boolean denoting whether the clear was successful in closing all notifications\n   */\n    clear() {\n        let key,\n            success = true;\n\n        for (key in this._notifications)\n            if (this._notifications.hasOwnProperty(key))\n                success = success && this._closeNotification(key);\n\n        return success;\n    }\n\n    /**\n   * Denotes whether Push is supported in the current browser\n   * @returns {boolean}\n   */\n    supported() {\n        let supported = false;\n\n        for (var agent in this._agents)\n            if (this._agents.hasOwnProperty(agent))\n                supported = supported || this._agents[agent].isSupported();\n\n        return supported;\n    }\n\n    /**\n   * Modifies settings or returns all settings if no parameter passed\n   * @param settings\n   */\n    config(settings?: {}) {\n        if (\n            typeof settings !== 'undefined' ||\n            (settings !== null && Util.isObject(settings))\n        )\n            Util.objectMerge(this._configuration, settings);\n\n        return this._configuration;\n    }\n\n    /**\n   * Copies the functions from a plugin to the main library\n   * @param plugin\n   */\n    extend(manifest: PluginManifest) {\n        var plugin,\n            Plugin,\n            hasProp = {}.hasOwnProperty;\n\n        if (!hasProp.call(manifest, 'plugin')) {\n            throw new Error(Messages.errors.invalid_plugin);\n        } else {\n            if (\n                hasProp.call(manifest, 'config') &&\n                Util.isObject(manifest.config) &&\n                manifest.config !== null\n            ) {\n                this.config(manifest.config);\n            }\n\n            Plugin = manifest.plugin;\n            plugin = new Plugin(this.config());\n\n            for (var member in plugin) {\n                if (\n                    hasProp.call(plugin, member) &&\n                    Util.isFunction(plugin[member])\n                )\n                    // $FlowFixMe\n                    this[member] = plugin[member];\n            }\n        }\n    }\n}\n"],"names":["module","exports","obj","__esModule","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","this","_retryDelays","undefined","retryContext","previousRetryCount","HttpError","errorMessage","statusCode","trueProto","prototype","__proto__","Error","TimeoutError","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","HttpResponse","statusText","content","HttpClient","url","options","send","method","NullLogger","_logLevel","_message","Arg","val","name","match","values","Platform","window","document","self","isBrowser","isWebWorker","isReactNative","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","length","formatArrayBuffer","ArrayBuffer","constructor","sendMessage","logger","transportName","httpClient","accessTokenFactory","headers","token","getUserAgentHeader","value","log","LogLevel","logMessageContent","responseType","post","timeout","withCredentials","response","createLogger","ConsoleLogger","instance","SubjectSubscription","subject","observer","_subject","_observer","index","observers","indexOf","splice","cancelCallback","catch","_","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","error","warn","info","userAgentHeaderName","isNode","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","process","platform","versions","node","getErrorString","e","stack","FetchHttpClient","_logger","fetch","requireFunc","__non_webpack_require__","_jar","_fetchType","bind","globalThis","global","getGlobalThis","AbortController","_abortControllerType","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","setTimeout","body","cache","credentials","mode","redirect","signal","clearTimeout","ok","deserializeContent","status","payload","cookies","getCookies","c","join","arrayBuffer","text","HttpTransportType","TransferFormat","XhrHttpClient","Promise","reject","resolve","xhr","XMLHttpRequest","open","setRequestHeader","Object","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","getCookieString","HeaderNames","_isAborted","LongPollingTransport","_accessTokenFactory","_pollAbort","_options","_running","onreceive","onclose","transferFormat","isRequired","isIn","_url","Binary","pollOptions","_getAccessToken","_updateHeaderToken","pollUrl","now","get","_closeError","_receiving","_poll","Authorization","pollAborted","_raiseOnClose","deleteOptions","delete","logMessage","ServerSentEventsTransport","encodeURIComponent","opened","Text","eventSource","EventSource","Cookie","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","features","_negotiateVersion","baseUrl","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_connectionState","_connectionStarted","_startInternalPromise","_startInternal","_stopPromise","_sendQueue","TransportSendQueue","_stopInternal","_stopError","stop","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","inherentKeepAlive","negotiateUrl","_resolveNegotiateUrl","JSON","parse","negotiateVersion","connectionToken","connectionId","requestedTransport","requestedTransferFormat","connectUrl","_createConnectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","push","ServerSentEvents","LongPolling","connect","actualTransport","transportMatches","transferFormats","map","s","ex","lastIndexOf","aTag","createElement","href","substring","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","reduce","a","result","offset","item","set","buffer","_resolver","_rejecter","TextMessageFormat","output","RecordSeparator","input","messages","pop","String","fromCharCode","RecordSeparatorCode","MessageType","HandshakeProtocol","handshakeRequest","write","stringify","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","Array","slice","call","textData","type","HubConnectionState","Subject","next","err","complete","HubConnection","connection","protocol","reconnectPolicy","_nextKeepAlive","_freezeEventListener","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","_processIncomingData","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","Disconnected","_cachedPingMessage","writeMessage","Ping","Reconnecting","_startPromise","_startWithStateTransitions","Connecting","addEventListener","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","start","_sendMessage","writeHandshakeRequest","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","startPromise","Disconnecting","_reconnectDelayHandle","_completeClose","methodName","args","promiseQueue","_replaceStreamingParams","streams","streamIds","invocationDescriptor","_createStreamInvocation","cancelInvocation","_createCancelInvocation","invocationId","then","_sendWithProtocol","invocationEvent","Completion","_launchStreams","sendPromise","_createInvocation","p","newMethod","toLowerCase","handlers","removeIdx","callback","_processHandshakeResponse","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","parseHandshakeResponse","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","methods","target","m","arguments","_cancelCallbacksWithError","_reconnect","removeEventListener","reconnectStartTime","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","key","nonblocking","streamId","subscribe","_createCompletionMessage","_createStreamItemMessage","i","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation","JsonHubProtocol","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","HubConnectionBuilder","logging","mapping","parseLogLevel","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","retryDelaysOrReconnectPolicy","isArray","create","_interopRequireDefault","require","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","defineProperty","enumerable","_utils","createSvgIcon","getSwitchBaseUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","SwitchBaseRoot","styled","ButtonBase","ownerState","_extends","padding","borderRadius","edge","marginLeft","size","marginRight","SwitchBaseInput","cursor","position","opacity","width","height","top","left","margin","zIndex","React","props","ref","autoFocus","checkedProp","checked","checkedIcon","className","defaultChecked","disabledProp","disabled","disableFocusRipple","icon","inputProps","inputRef","onBlur","onChange","onFocus","readOnly","required","tabIndex","other","_objectWithoutPropertiesLoose","useControlled","controlled","Boolean","state","setCheckedState","muiFormControl","useFormControl","hasLabelFor","classes","slots","root","capitalize","composeClasses","useUtilityClasses","_jsxs","component","clsx","centerRipple","focusRipple","role","children","_jsx","nativeEvent","defaultPrevented","newChecked","getSwitchUtilityClass","SwitchRoot","overridesResolver","styles","display","overflow","boxSizing","flexShrink","verticalAlign","colorAdjust","switchClasses","transform","SwitchSwitchBase","SwitchBase","switchBase","color","theme","palette","common","white","grey","transition","transitions","duration","shortest","backgroundColor","alpha","action","active","hoverOpacity","main","lighten","darken","SwitchTrack","track","black","SwitchThumb","thumb","boxShadow","shadows","inProps","useThemeProps","sx","composedClasses","validator","componentNameInError","Component","propName","componentName","location","propFullName","unstable_ClassNameGenerator","configure","generator","ClassNameGenerator","toHex","arrayToHex","arr","prepareIgnoredColor","isIgnoredColor","ignoredColor","isIgnoredColorAsNumbers","isIgnoredRGBColor","isIgnoredRGBAColor","redIgnored","greenIgnored","blueIgnored","alphaIgnored","threshold","alphaData","alphaInRange","inRange","isIgnoredRGBAColorWithThreshold","colorComponent","ignoredColorComponent","dominantAlgorithm","len","colorHash","step","max","red","green","blue","Math","round","redTotal","greenTotal","blueTotal","alphaTotal","count","defaultColor","simpleAlgorithm","sqrtAlgorithm","sqrt","getDefaultColor","getOption","defaultValue","getOriginalSize","resource","isInstanceOfHTMLImageElement","naturalWidth","naturalHeight","src","search","HTMLVideoElement","isInstanceOfHTMLVideoElement","videoWidth","videoHeight","getSrc","HTMLCanvasElement","isInstanceOfHTMLCanvasElement","OffscreenCanvas","isInstanceOfOffscreenCanvas","ImageBitmap","isInstanceOfImageBitmap","HTMLImageElement","isWebWorkers","ERROR_PREFIX","outputError","silent","getError","FastAverageColor","canvas","ctx","getColorAsync","Image","img","crossOrigin","bindImageEvents","getColor","prepareResult","originalSize","factor","srcLeft","srcTop","srcWidth","srcHeight","destWidth","destHeight","prepareSizeAndPosition","concat","getContext","clearRect","drawImage","bitmapData","getImageData","getColorFromArray4","arrLength","algorithm","rgb","rgba","isDarkColor","hex","hexa","isDark","isLight","destroy","_this","unbindEvents","errors","incompatible","invalid_plugin","invalid_title","permission_denied","sw_notification_error","sw_registration_error","unknown_interface","writable","configurable","Permission","win","_win","GRANTED","DEFAULT","DENIED","_permissions","onGranted","onDenied","_requestWithCallback","_requestAsPromise","existing","resolved","Notification","permission","webkitNotifications","checkPermission","requestPermission","hasPermissions","isModernAPI","isWebkitAPI","resolvePromise","rejectPromise","resolver","_this2","navigator","mozNotification","external","msIsSiteMode","Util","obs","_typeof","source","hasOwnProperty","isObject","objectMerge","AbstractAgent","DesktopAgent","title","isString","isUndefined","isNull","x32","tag","requireInteraction","notification","MobileChromeAgent","serviceWorker","func","register","ready","registration","localData","link","origin","onClick","isFunction","getFunctionBody","onClose","assign","showNotification","vibrate","getNotifications","postMessage","notifications","Messages","MobileFirefoxAgent","createNotification","show","MSAgent","msSiteModeClearIconOverlay","msSiteModeSetIconOverlay","x16","msSiteModeActivate","WebKitAgent","cancel","_currentId","_notifications","_agents","desktop","chrome","firefox","ms","webkit","_configuration","fallback","success","_removeNotification","isSupported","wrapper","_closeNotification","_addNotification","Number","isInteger","_prepareNotification","_this3","sw","config","_serviceWorkerCallback","onShow","onError","promiseCallback","has","_this4","_createCallback","supported","agent","settings","manifest","plugin","hasProp","member"],"sourceRoot":""}