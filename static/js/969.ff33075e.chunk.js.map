{"version":3,"file":"static/js/969.ff33075e.chunk.js","mappings":"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","sources":["api/RestApi.js","components/Main/Messages/messagesContent.jsx","components/Main/Messages/messages.jsx","components/Main/SideBar/Chats/chats.jsx","components/Main/SideBar/Users/users.jsx","components/Main/SideBar/Settings/settingsBar.jsx","components/Main/SideBar/Settings/settingsPage.jsx","components/Main/SideBar/sidebar.jsx","store/reducers/chatsSelector.js","store/reducers/sidebarSelector.js","components/Main/main.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport {toast} from \"react-toastify\";\r\nimport store from \"../store/redux-store\";\r\nimport {DeleteUser} from \"../store/reducers/sidebarReducer\";\r\nimport platform from \"platform\"\r\n\r\naxios.defaults.baseURL = 'http://70.37.67.50/';\r\n// axios.defaults.baseURL = 'https://bsite.net/PixelMessenger';\r\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = '*'; // for all requests\r\naxios.defaults.headers.common['Content-Type'] = 'application/json'; //json content set by default\r\naxios.defaults.headers.common['Authorization'] = localStorage.AUTH_TOKEN; //localStorage.AUTH_TOKEN\r\naxios.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n        if (error.response?.status === 401) {\r\n            if (!toast.isActive(error.response.data.message)) {\r\n                toast.error(error.response.data.message, {toastId: error.response.data.message});\r\n            }\r\n            if (localStorage.AUTH_TOKEN) {\r\n                DeleteUser()(store.dispatch)\r\n            }\r\n        } else if (error.response?.status === 400) {\r\n            if (!toast.isActive(error.response.data.message)) {\r\n                toast.error(error.response.data.message, {toastId: error.response.data.message});\r\n            }\r\n        }\r\n    });\r\n\r\nlet cancelToken;\r\n\r\nexport const SearchUsers = async (input) => {\r\n    if (cancelToken) {\r\n        cancelToken.cancel(\"Operation canceled due to new request.\")\r\n    }\r\n    cancelToken = axios.CancelToken.source()\r\n    return await axios.get('api/users/search/' + input, {cancelToken: cancelToken.token})\r\n        .then(response => response?.data)\r\n        .catch(error => console.log(error))\r\n}\r\n\r\nconst fingerPrint = localStorage.fingerPrint ? localStorage.fingerPrint : platform.name + \" \" + platform.os;\r\n\r\nexport const FetchCurrentUser = async () => {\r\n    return await axios.get('api/users/current/info/' + fingerPrint)\r\n        .then(response => response.data)\r\n        .catch(error => console.log(error))\r\n}\r\n\r\nexport const UploadImage = async (image) => {\r\n    return await axios.post('api/users/current/edit/image',\r\n        {\r\n            image\r\n        }, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.status === 200 && toast.success(\"New profile picture uploaded!\"))\r\n        .catch(error => console.log(error))\r\n}\r\n\r\nexport const UploadBackgroundImage = async (image) => {\r\n    return await axios.post('api/users/current/edit/background/' + fingerPrint,\r\n        {\r\n            image\r\n        }, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.status === 200 && toast.success(\"New background uploaded!\"))\r\n        .catch(error => console.log(error))\r\n}\r\n\r\nexport const ChangeUserInfo = async (name, email, password) => {\r\n    return await axios.put('api/users/current/edit', {\r\n        name,\r\n        email,\r\n        password\r\n    }).then(response => response.status === 204 && toast.success(\"Profile changes uploaded!\"))\r\n        .catch(error => console.log(error))\r\n}\r\nexport const LoginAPI = async (userName, password) => {\r\n    return await axios.post('/api/authorization/signIn',\r\n        {\r\n            userName,\r\n            password\r\n        })\r\n        .then(response => {\r\n            localStorage.AUTH_TOKEN = \"Bearer \" + response.data.jwtToken;\r\n            if (localStorage.AUTH_TOKEN) {\r\n                axios.defaults.headers.common['Authorization'] = \"Bearer \" + response.data.jwtToken;\r\n            }\r\n        })\r\n        .catch(error => console.log(error))\r\n}\r\n\r\nexport const RegistrationAPI = async (name, userName, email, password) => {\r\n    return await axios.post('/api/authorization/signUp',\r\n        {\r\n            name,\r\n            userName,\r\n            email,\r\n            password,\r\n        }).then(response => {\r\n        localStorage.AUTH_TOKEN = \"Bearer \" + response.data.jwtToken;\r\n        if (localStorage.AUTH_TOKEN) {\r\n            axios.defaults.headers.common['Authorization'] = \"Bearer \" + response.data.jwtToken;\r\n        }\r\n    }).catch(error => console.log(error));\r\n}\r\n","import React, {useEffect, useRef} from 'react';\r\nimport {SetSideBarStatusActionCreator} from \"../../../store/reducers/appReducer\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport DefaultIcon from \"../../../assets/img/Default-Profile-Icon.png\";\r\nimport {TextareaAutosize} from \"@mui/material\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport ArrowDownwardIcon from \"@mui/icons-material/ArrowDownward\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getSideBarStatus} from \"../../../store/reducers/appSelector\";\r\n\r\nconst MessagesContent = ({\r\n                             handleSubmit,\r\n                             handleScroll,\r\n                             messagesList,\r\n                             UserInfo,\r\n                             ScrollRef,\r\n                             setInput,\r\n                             input,\r\n                             Chat,\r\n                             scrollValues,\r\n                             changeScrollValues,\r\n                             CurrentChatMessages\r\n                         }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const SideBarStatus = useSelector(getSideBarStatus);\r\n    const FirstScroll = useRef(false);\r\n\r\n    useEffect(() => {\r\n        if (CurrentChatMessages && Chat) {\r\n            if (CurrentChatMessages.length !== 0 && !FirstScroll.current && ScrollRef.current) {\r\n                FirstScroll.current = true;\r\n                ScrollRef.current.scrollTop = ScrollRef.current.scrollHeight;\r\n            } else if (CurrentChatMessages.length !== 0 && !scrollValues.scrollButton && ScrollRef.current) {\r\n                ScrollRef.current.scrollTop = ScrollRef.current.scrollHeight;\r\n            }\r\n        }\r\n        return () => {\r\n            FirstScroll.current = false;\r\n        }\r\n    }, [Chat, CurrentChatMessages])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(SetSideBarStatusActionCreator(false))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Messages-Content\">\r\n            <div className=\"Messages-Header\">\r\n                <div className=\"Messages-Header-Content\">\r\n                    <div className=\"Back-Button\"\r\n                         onClick={() => dispatch(SetSideBarStatusActionCreator(!SideBarStatus))}>\r\n                        <ArrowBackIcon/>\r\n                    </div>\r\n                    <div className=\"profile-info\">\r\n                        <img src={Chat.otherProfileImage ? (Chat.otherProfileImage.url) : (DefaultIcon)}\r\n                             alt={DefaultIcon} loading=\"lazy\"/>\r\n                        <p>{Chat.otherName}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"Messages-Content-Scroll\" onScroll={handleScroll} ref={ScrollRef}\r\n                 style={UserInfo?.backgroundImage && {\r\n                     background: `url(${UserInfo.backgroundImage.url}) no-repeat center center / cover`,\r\n                 }}>\r\n                <ul className=\"Messages-List\">\r\n                    {messagesList}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"Messages-Tools\">\r\n                <TextareaAutosize className=\"Messages-Tools-Textarea\" value={input}\r\n                                  autoComplete=\"off\"\r\n                                  maxRows={3}\r\n                                  placeholder=\"Type here...\"\r\n                                  onKeyDown={(e) => {\r\n                                      if (e.key === \"Enter\" && !e.shiftKey) {\r\n                                          e.preventDefault();\r\n                                          handleSubmit()\r\n                                      }\r\n                                  }}\r\n                                  onChange={e => setInput(e.target.value)}\r\n                                  onClick={() => console.log(ScrollRef.current.clientHeight)}\r\n                />\r\n                <button className=\"Messages-Tools-Button\" onClick={handleSubmit}>\r\n                    <SendIcon/>\r\n                </button>\r\n                <div className=\"Messages-Tools-Downward-Button\"\r\n                     style={!scrollValues.scrollButton ? {display: \"none\"} : {display: \"flex\"}}\r\n                     onClick={() => {\r\n                         ScrollRef.current.scrollTop = ScrollRef.current.scrollHeight;\r\n                         changeScrollValues(\"scrollButton\")(false);\r\n                     }}>\r\n                    <ArrowDownwardIcon/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(MessagesContent);","import React, {useState, useEffect, useRef, useMemo, useCallback} from 'react';\r\nimport \"../../../styles/Messages.scss\"\r\nimport DefaultIcon from \"../../../assets/img/Default-Profile-Icon.png\";\r\nimport {Route, Routes, Navigate} from \"react-router-dom\";\r\nimport MessagesContent from \"./messagesContent\";\r\nimport {SetCurrentChatMessagesActionCreator} from \"../../../store/reducers/chatsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Messages = ({Chat, ChatsConnection, CurrentChatMessages, UserInfo}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [input, setInput] = useState(\"\");\r\n    const [scrollValues, setScrollValues] = useState({\r\n        scrollTop: false,\r\n        scrollButton: false,\r\n        scrollBottom: false\r\n    });\r\n    const ScrollRef = useRef(null)\r\n\r\n    const changeScrollValues = useCallback((prop) => (value) => {\r\n        setScrollValues({...scrollValues, [prop]: value})\r\n    }, [scrollValues])\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        if (ChatsConnection && input.trim()) {\r\n            changeScrollValues(\"scrollButton\")(false);\r\n            ScrollRef.current.scrollTop = ScrollRef.current.scrollHeight;\r\n            ChatsConnection.invoke(\"SendMessage\", {\r\n                text: input,\r\n                RecipientUserName: Chat.otherUserName\r\n            });\r\n        }\r\n        setInput(\"\")\r\n    }, [Chat, ChatsConnection, changeScrollValues, input])\r\n\r\n    const handleScroll = useCallback((event) => {\r\n        // console.log(event.currentTarget.scrollTop + \" \" + event.currentTarget.scrollHeight + \" \" + event.currentTarget.clientHeight)\r\n        if (scrollValues.scrollTop !== (event.currentTarget.scrollTop === 0)) {\r\n            changeScrollValues(\"scrollTop\")(event.currentTarget.scrollTop === 0);\r\n        }\r\n        if (scrollValues.scrollButton !== (event.currentTarget.scrollHeight - event.currentTarget.scrollTop >= event.currentTarget.clientHeight * 2)) {\r\n            changeScrollValues(\"scrollButton\")(event.currentTarget.scrollHeight - event.currentTarget.scrollTop >= event.currentTarget.clientHeight * 2);\r\n        }\r\n        if (scrollValues.scrollBottom !== (event.currentTarget.scrollHeight - event.currentTarget.scrollTop === event.currentTarget.clientHeight)) {\r\n            changeScrollValues(\"scrollBottom\")(event.currentTarget.scrollHeight - event.currentTarget.scrollTop === event.currentTarget.clientHeight);\r\n        }\r\n    }, [changeScrollValues, scrollValues.scrollBottom, scrollValues.scrollButton, scrollValues.scrollTop])\r\n\r\n    useEffect(() => {\r\n        if (localStorage.AUTH_TOKEN && Chat) {\r\n            ChatsConnection.invoke(\"LoadMessages\", Chat.otherUserName)\r\n        }\r\n        return () => {\r\n            dispatch(SetCurrentChatMessagesActionCreator([]))\r\n        }\r\n    }, [Chat])\r\n\r\n    let messagesList = useMemo(() => CurrentChatMessages ? (CurrentChatMessages.length !== 0 && CurrentChatMessages.map(item => item.senderUserName === UserInfo.userName ?\r\n        <li className=\"Messages-Item\" style={{alignSelf: \"flex-end\"}} key={item.text + item.sent}>\r\n            <div className=\"Messages-Item-Content\">\r\n                <img className=\"Messages-Item-Image\"\r\n                     src={UserInfo.profileImage ? (UserInfo.profileImage.url) : (DefaultIcon)}\r\n                     alt={DefaultIcon}/>\r\n                <div className=\"Messages-Item-Content-Wrapper\"\r\n                     style={{backgroundColor: \"#12569a\", color: \"white\"}}>\r\n                    <span className=\"Messages-Item-Text\">{item.text}</span>\r\n                    <span className=\"Messages-Item-Date\"\r\n                          style={{color: \"#a9a9a9\"}}>{(new Date(item.sent)).toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})}</span>\r\n                </div>\r\n            </div>\r\n        </li>\r\n        :\r\n        <li className=\"Messages-Item\" style={{alignSelf: \"flex-start\"}} key={item.text + item.sent}>\r\n            <div className=\"Messages-Item-Content\">\r\n                <img className=\"Messages-Item-Image\"\r\n                     src={Chat?.otherProfileImage ? (Chat.otherProfileImage?.url) : (DefaultIcon)}\r\n                     alt={DefaultIcon}/>\r\n                <div className=\"Messages-Item-Content-Wrapper\">\r\n                    <span className=\"Messages-Item-Text\">{item.text}</span>\r\n                    <span className=\"Messages-Item-Date\">{(new Date(item.sent)).toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})}</span>\r\n                </div>\r\n            </div>\r\n        </li>)) : null, [Chat, CurrentChatMessages, UserInfo]);\r\n\r\n    return (\r\n        <div className=\"Messages\" style={UserInfo?.backgroundImage && {\r\n            background: `url(${UserInfo.backgroundImage.url}) no-repeat center center / cover`,\r\n        }}>\r\n            <Routes>\r\n                <Route path={\"/chat\"}\r\n                       element={Chat ?\r\n                           <MessagesContent scrollValues={scrollValues} changeScrollValues={changeScrollValues}\r\n                                            Chat={Chat} input={input} setInput={setInput} ScrollRef={ScrollRef}\r\n                                            UserInfo={UserInfo} messagesList={messagesList}\r\n                                            handleScroll={handleScroll} handleSubmit={handleSubmit}\r\n                                            CurrentChatMessages={CurrentChatMessages}/> :\r\n                           <Navigate to=\"/\"/>}/>\r\n            </Routes>\r\n        </div>);\r\n};\r\n\r\nexport default React.memo(Messages);","import React, {useCallback, useMemo} from 'react';\r\nimport DefaultIcon from \"../../../../assets/img/Default-Profile-Icon.png\";\r\nimport \"../../../../styles/Chats.scss\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {SetCurrentChatActionCreator} from \"../../../../store/reducers/chatsReducer\";\r\nimport {SetSideBarStatusActionCreator} from \"../../../../store/reducers/appReducer\";\r\nimport {getSideBarStatus} from \"../../../../store/reducers/appSelector\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst Chats = ({ChatsList, UserInfo}) => {\r\n    const dispatch = useDispatch();\r\n    const SideBarStatus = useSelector(getSideBarStatus);\r\n\r\n    const handleClick = useCallback((chat) => {\r\n        dispatch(SetSideBarStatusActionCreator(!SideBarStatus))\r\n        dispatch(SetCurrentChatActionCreator(chat));\r\n    }, [SideBarStatus, dispatch])\r\n\r\n    let chatList = useMemo(() => ChatsList ? (ChatsList.length !== 0 && ChatsList.map(item => <li key={item.otherName}>\r\n        <Link to={\"/chat\"} className=\"Chat-Item\" onClick={() => handleClick({\r\n            userName: UserInfo.userName,\r\n            otherName: item.otherName,\r\n            otherProfileImage: item.otherProfileImage,\r\n            otherUserName: item.otherUserName\r\n        })}>\r\n            <img src={item.otherProfileImage ? (item.otherProfileImage.url) : (DefaultIcon)}\r\n                 alt={DefaultIcon} loading=\"lazy\"/>\r\n            <div className=\"Chat-Info\">\r\n                <div className=\"Chat-UserName\">\r\n                    <p>{item.otherName}</p>\r\n                    <p className=\"Chat-Date\">{(new Date(item.messageStamp)).toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})}</p>\r\n                </div>\r\n                <div className=\"Chat-LastMessage\">\r\n                    <p>{item.lastMessage ? item.lastMessage.length > 20 ? item.lastMessage.substring(0, 20) + \"...\" : item.lastMessage : null}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    </li>)) : null, [ChatsList, UserInfo, handleClick]);\r\n\r\n    return (\r\n        <div>\r\n            {chatList ? <ul>{chatList}</ul> : <p style={{margin: 10}}>It's too empty...</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Chats);","import React, {useCallback, useMemo} from 'react';\r\nimport \"../../../../styles/Users.scss\";\r\nimport DefaultIcon from \"../../../../assets/img/Default-Profile-Icon.png\"\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {SetSideBarStatusActionCreator} from \"../../../../store/reducers/appReducer\";\r\nimport {SetCurrentChatActionCreator} from \"../../../../store/reducers/chatsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getSideBarStatus} from \"../../../../store/reducers/appSelector\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Users = ({isLoading, usersList, UserInfo}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const SideBarStatus = useSelector(getSideBarStatus);\r\n\r\n    const handleClick = useCallback((chat) => {\r\n        dispatch(SetSideBarStatusActionCreator(!SideBarStatus))\r\n        dispatch(SetCurrentChatActionCreator(chat));\r\n    }, [SideBarStatus, dispatch])\r\n\r\n    let Users = useMemo(() => usersList ? ((usersList.length === 0) ?\r\n        <li style={{margin: \"10px\"}}>User is not found</li>\r\n        :\r\n        usersList.map(item => <li key={item.userName}>\r\n            <Link to={\"/chat\"} className=\"User\" onClick={() => handleClick({\r\n                userName: UserInfo.userName,\r\n                otherName: item.name,\r\n                otherProfileImage: item.profileImage,\r\n                otherUserName: item.userName\r\n            })}>\r\n                <img src={item.profileImage ? (item.profileImage.url) : (DefaultIcon)}\r\n                     alt={DefaultIcon} loading=\"lazy\"/>\r\n                <div className=\"info\">\r\n                    <div className=\"Name\">\r\n                        <p>{item.name}</p>\r\n                    </div>\r\n                    <div className=\"UserName\">\r\n                        <p>@{item.userName}</p>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </li>)) : null, [UserInfo, handleClick, usersList])\r\n\r\n    return (\r\n        <div className=\"Users\">\r\n            {isLoading ?\r\n                <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\", height: \"100%\"}}>\r\n                    <CircularProgress/></div> : <ul>{Users}</ul>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Users);\r\n","import React, {useEffect} from 'react';\r\nimport \"../../../../styles/SettingsBar.scss\"\r\n\r\nconst SettingsBar = ({fetchSearch, SearchInput, setSearchInput, isActive, setActive}) => {\r\n\r\n    useEffect(() => {\r\n        if (SearchInput) {\r\n            fetchSearch({input: SearchInput})\r\n        }\r\n    }, [SearchInput, fetchSearch])\r\n\r\n    return (\r\n        <div className=\"SettingsBar\">\r\n            <div className={isActive ? \"Burger-Settings open\" : \"Burger-Settings\"}\r\n                 onClick={() => setActive(!isActive)}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n            </div>\r\n\r\n            <input className=\"Search-Block\" placeholder=\"Search\"\r\n                   onChange={e => {\r\n                       setSearchInput(e.target.value.trim());\r\n                       setActive(false);\r\n                   }}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(SettingsBar);","import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport {ChangeUserInfo, UploadBackgroundImage, UploadImage} from \"../../../../api/RestApi\";\r\nimport \"../../../../styles/Auth.scss\"\r\nimport \"../../../../styles/SettingsPage.scss\"\r\nimport DefaultIcon from \"../../../../assets/img/Default-Profile-Icon.png\";\r\nimport {Button, CircularProgress, FormControl, Switch, TextField} from \"@mui/material\";\r\nimport * as yup from \"yup\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {DeleteUser} from \"../../../../store/reducers/sidebarReducer\";\r\nimport {useMutation} from \"react-query\";\r\nimport {ThemeContext} from \"../../../../context/ThemeContext\";\r\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\r\nimport BrightnessHighIcon from '@mui/icons-material/BrightnessHigh';\r\nimport {FastAverageColor} from 'fast-average-color';\r\n\r\n\r\nconst SettingsPage = ({refetchUserInfo, UserInfo}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {theme, changeTheme} = useContext(ThemeContext);\r\n    //Values for edit profile form\r\n    const [values, setValues] = useState({\r\n        image: null,\r\n        backgroundImage: null,\r\n        changes: false,\r\n        backgroundImageIsDark: false\r\n    })\r\n    //Function for edit profile form variables\r\n    const changeLocalState = useCallback((prop) => (value) => {\r\n        setValues({...values, [prop]: value})\r\n    }, [values])\r\n\r\n    const backgroundIsDark = useCallback((url) => {\r\n        const fac = new FastAverageColor();\r\n        fac.getColorAsync(url, {algorithm: 'dominant'}).then(color => {\r\n            changeLocalState(\"backgroundImageIsDark\")(color.isDark)\r\n            console.log(color.isDark)\r\n            return color.isDark\r\n        })\r\n    }, [])\r\n\r\n    const {mutate: fetchNewImage, isLoading: newImageIsLoading} =\r\n        useMutation(({image}) => UploadImage(image), {\r\n            onSuccess: () => {\r\n                refetchUserInfo()\r\n                changeLocalState(\"image\")(null);\r\n            }\r\n        })\r\n    const {mutate: fetchNewUserInfo, isLoading: newUserInfoIsLoading} =\r\n        useMutation(({name, email, password}) => ChangeUserInfo(name, email, password), {\r\n            onSuccess: () => {\r\n                refetchUserInfo()\r\n                changeLocalState(\"changes\")(false)\r\n            }\r\n        })\r\n    const {mutate: fetchNewBackgroundImage, isLoading: newBackgroundImageIsLoading} =\r\n        useMutation(({backgroundImage}) => UploadBackgroundImage(backgroundImage), {\r\n            onSuccess: () => {\r\n                refetchUserInfo()\r\n                changeLocalState(\"backgroundImage\")(null)\r\n            }\r\n        })\r\n\r\n    let schema = yup.object().shape({\r\n        name: yup.string(\"Invalid name format\").required(\"Name is Required\").max(20, \"The length of the name should not exceed 20 characters!\"),\r\n        email: yup.string(\"Invalid email format\").email(\"Invalid email format\").required(\"Email is Required\"),\r\n        password: yup.string().min(8, \"Invalid password length\"),\r\n    });\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: UserInfo ? UserInfo.name : \"\",\r\n            email: UserInfo ? UserInfo.email : \"\",\r\n            password: \"\",\r\n        },\r\n        validationSchema: schema,\r\n        onSubmit: values => {\r\n            fetchNewUserInfo({name: values.name, email: values.email, password: values.password})\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (UserInfo?.backgroundImage?.url) {\r\n            backgroundIsDark(UserInfo.backgroundImage.url)\r\n        }\r\n    }, [UserInfo?.backgroundImage?.url, backgroundIsDark])\r\n\r\n    return (\r\n        <div className=\"SettingsPage\">\r\n\r\n            {UserInfo ?\r\n                <div className=\"UserInfo\" style={UserInfo.backgroundImage && {\r\n                    background: `url(${UserInfo.backgroundImage.url}) no-repeat center center / cover`,\r\n                }}>\r\n                    <img src={UserInfo?.profileImage?.url ? UserInfo.profileImage.url : DefaultIcon}\r\n                         alt={DefaultIcon}/>\r\n                    <div className=\"UserInfo-Text\">\r\n                        <div className=\"Name\"\r\n                             style={UserInfo?.backgroundImage?.url ? (values.backgroundImageIsDark ? {color: \"white\"} : {color: \"#000000\"}) : null}>{UserInfo.name}</div>\r\n                        <div className=\"UserName\"\r\n                             style={UserInfo?.backgroundImage?.url ? (values.backgroundImageIsDark ? {color: \"darkgray\"} : {color: \"gray\"}) : null}>{\"@\" + UserInfo.userName}</div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className=\"UserInfo-Preloader\">\r\n                    <CircularProgress/>\r\n                </div>}\r\n\r\n            {UserInfo ?\r\n                <>\r\n                    <div className=\"Change-Buttons\">\r\n                        {values.image ?\r\n                            <div>\r\n                                <div className=\"Preview-Changes\">\r\n                                    <p>Profile changes preview:</p>\r\n                                    <div className=\"Preview-Changes-UserInfo\">\r\n                                        <img src={URL.createObjectURL(values.image)} style={{\r\n                                            objectPosition: \"center center\",\r\n                                            objectFit: \"cover\",\r\n                                            height: 50,\r\n                                            width: 50,\r\n                                            margin: \"0 10px 0 0\",\r\n                                            borderRadius: \"50%\"\r\n                                        }} alt={DefaultIcon}/>\r\n                                        <div style={{display: \"grid\", gridTemplateRows: \"1fr 1fr\"}}>\r\n                                            <div>{UserInfo.name}</div>\r\n                                            <div style={{color: \"darkgrey\"}}>{\"@\" + UserInfo.userName}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"Uploading-Tools\">\r\n                                    <div className=\"item\">\r\n                                        <Button variant=\"contained\" disabled={newImageIsLoading}\r\n                                                onClick={() => {\r\n                                                    fetchNewImage({image: values.image})\r\n                                                }}>\r\n                                            Upload picture</Button>\r\n                                    </div>\r\n                                    <div className=\"item\">\r\n                                        <Button className=\"Cancel-Button\" variant=\"contained\"\r\n                                                onClick={() => changeLocalState(\"image\")(null)}>\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div className=\"item\"><Button variant=\"contained\" component=\"label\">\r\n                                Choose a new picture\r\n                                <input id=\"inputImage\" style={{display: \"none\"}}\r\n                                       type=\"file\"\r\n                                       accept=\"image/png, image/gif, image/jpeg\"\r\n                                       onChange={e => changeLocalState(\"image\")(e.target.files[0])}/>\r\n                            </Button>\r\n                            </div>\r\n                        }\r\n\r\n                        {values.changes ?\r\n                            <form className=\"Profile-Changes-Preview\" onSubmit={formik.handleSubmit}>\r\n                                <p className=\"Profile-Changes-Preview-Header\">Changes preview</p>\r\n                                <FormControl className=\"item\" sx={{width: 250}}>\r\n                                    <TextField className=\"Custom-TextField\"\r\n                                               variant=\"outlined\"\r\n                                               id=\"name\"\r\n                                               name=\"name\"\r\n                                               label=\"Name\"\r\n                                               value={formik.values.name}\r\n                                               onChange={formik.handleChange}\r\n                                               error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                               helperText={formik.touched.name && formik.errors.name}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl className=\"item\" sx={{width: 250}}>\r\n                                    <TextField className=\"Custom-TextField\"\r\n                                               variant=\"outlined\"\r\n                                               id=\"email\"\r\n                                               name=\"email\"\r\n                                               label=\"Email\"\r\n                                               value={formik.values.email}\r\n                                               onChange={formik.handleChange}\r\n                                               error={formik.touched.email && Boolean(formik.errors.email)}\r\n                                               helperText={formik.touched.email && formik.errors.email}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl className=\"item\" sx={{width: 250}}>\r\n                                    <TextField className=\"Custom-TextField\"\r\n                                               variant=\"outlined\"\r\n                                               id=\"password\"\r\n                                               label=\"Password\"\r\n                                               type=\"password\"\r\n                                               value={formik.values.password}\r\n                                               onChange={formik.handleChange}\r\n                                               error={formik.touched.password && Boolean(formik.errors.password)}\r\n                                               helperText={formik.touched.password && formik.errors.password}\r\n                                    />\r\n                                </FormControl>\r\n                                <div>\r\n                                    <Button className=\"item\" variant=\"contained\" type=\"submit\"\r\n                                            disabled={newUserInfoIsLoading}>\r\n                                        Set changes</Button>\r\n                                    <Button className=\"Cancel-Button item\" variant=\"contained\"\r\n                                            onClick={() => changeLocalState(\"changes\")(!values.changes)}>Cancel</Button>\r\n                                </div>\r\n                            </form>\r\n                            :\r\n                            <div className=\"item\">\r\n                                <Button variant=\"contained\"\r\n                                        onClick={() => changeLocalState(\"changes\")(!values.changes)}>\r\n                                    Change profile info</Button>\r\n                            </div>\r\n                        }\r\n\r\n                        {values.backgroundImage ?\r\n                            <div>\r\n                                <div className=\"New-Background-Tools\">\r\n                                    <p>Background preview:</p>\r\n                                    <img className=\"New-Background-Preview\"\r\n                                         src={URL.createObjectURL(values.backgroundImage)}\r\n                                         style={{\r\n                                             objectPosition: \"no-repeat center center\",\r\n                                             objectFit: \"cover\"\r\n                                         }} alt=\"backgroundImage\"/>\r\n                                    <div style={{\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"space-between\",\r\n                                        width: \"100%\"\r\n                                    }}>\r\n                                        <div className=\"item\">\r\n                                            <Button variant=\"contained\"\r\n                                                    disabled={newBackgroundImageIsLoading}\r\n                                                    onClick={() => fetchNewBackgroundImage({backgroundImage: values.backgroundImage})}>Upload</Button>\r\n                                        </div>\r\n\r\n                                        <div className=\"item\">\r\n                                            <Button className=\"Cancel-Button\" variant=\"contained\"\r\n                                                    onClick={() => changeLocalState(\"backgroundImage\")(null)}>\r\n                                                Cancel\r\n                                            </Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div className=\"item\">\r\n                                <Button variant=\"contained\" component=\"label\">\r\n                                    Choose a new background\r\n                                    <input id=\"inputImage\" style={{display: \"none\"}}\r\n                                           type=\"file\"\r\n                                           accept=\"image/png, image/gif, image/jpeg\"\r\n                                           onChange={e => changeLocalState(\"backgroundImage\")(e.target.files[0])}/>\r\n                                </Button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </>\r\n                : null}\r\n\r\n\r\n            <div className=\"Theme-Switch\">\r\n                <div className=\"Theme-Switch-Icon\"> {theme === \"theme-dark\" ? <Brightness4Icon/> :\r\n                    <BrightnessHighIcon/>}</div>\r\n                <div className=\"Theme-Switch-Label\">Night mode</div>\r\n                <Switch\r\n                    checked={theme === \"theme-dark\"}\r\n                    onChange={() => changeTheme(theme === \"theme-dark\" ? \"theme-light\" : \"theme-dark\")}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Button className=\"item\" variant=\"contained\" onClick={() => dispatch(DeleteUser())}>Log Out</Button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(SettingsPage);","import React, {useState, useEffect} from 'react';\r\nimport \"../../../styles/SideBar.scss\"\r\nimport Chats from \"./Chats/chats\";\r\nimport Users from \"./Users/users\";\r\nimport SettingsBar from \"./Settings/settingsBar\";\r\nimport SettingsPage from \"./Settings/settingsPage\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetUserInfoActionCreator} from \"../../../store/reducers/sidebarReducer\";\r\nimport {useMutation, useQuery} from \"react-query\";\r\nimport {FetchCurrentUser, SearchUsers} from \"../../../api/RestApi\";\r\n\r\n\r\nconst Sidebar = ({UserInfo, AuthStatus, ChatsList}) => {\r\n    const [isActive, setActive] = useState(false); //Burger menu state\r\n    const [SearchInput, setSearchInput] = useState(\"\"); //Search bar state\r\n    const dispatch = useDispatch();\r\n\r\n    const {mutate: fetchSearch, isLoading, data: usersList} = useMutation(({input}) => SearchUsers(input));\r\n    const {data: fetchedUserInfo, refetch: refetchUserInfo} =\r\n        useQuery(\"FetchCurrentUser\", FetchCurrentUser, {enabled: false})\r\n\r\n    //Fetch onMount profileData\r\n    useEffect(() => {\r\n        if (AuthStatus) {\r\n            //loaded userinfo !== current userInfo in global state\r\n            fetchedUserInfo !== UserInfo ? dispatch(SetUserInfoActionCreator(fetchedUserInfo)) : refetchUserInfo();\r\n        }\r\n    }, [AuthStatus, UserInfo, dispatch, fetchedUserInfo, refetchUserInfo])\r\n\r\n\r\n    let SideBarContent;\r\n\r\n    if (!SearchInput || isActive) {\r\n        SideBarContent = <Chats ChatsList={ChatsList} UserInfo={UserInfo}/>;\r\n    }\r\n    if (SearchInput) {\r\n        SideBarContent = <Users isLoading={isLoading} usersList={usersList} UserInfo={UserInfo}/>\r\n    }\r\n    if (isActive) {\r\n        SideBarContent = <SettingsPage refetchUserInfo={refetchUserInfo} UserInfo={UserInfo}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"SideBar\">\r\n            <SettingsBar fetchSearch={fetchSearch} SearchInput={SearchInput} setSearchInput={setSearchInput}\r\n                         isActive={isActive} setActive={setActive}/>\r\n            <div className=\"Scroll\">\r\n                {SideBarContent}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Sidebar);","export const getCurrentChat = (state) => {\r\n    return state.ChatsComponent.CurrentChat;\r\n}\r\nexport const getChatsList = (state) => {\r\n    return state.ChatsComponent.ChatsList;\r\n}\r\nexport const getCurrentChatMessages = (state) => {\r\n    return state.ChatsComponent.CurrentChatMessages;\r\n}","export const getUserInfo = (state) => {\r\n    return state.SideBarComponent.UserInfo;\r\n}","import React, {useCallback, useEffect, useLayoutEffect} from 'react';\r\nimport \"../../styles/Main.scss\"\r\nimport Messages from \"./Messages/messages\";\r\nimport SideBar from \"./SideBar/sidebar\";\r\nimport * as signalR from \"@microsoft/signalr\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAuthStatus, getChatConnection, getSideBarStatus} from \"../../store/reducers/appSelector\";\r\nimport {SetChatsConnectionActionCreator} from \"../../store/reducers/appReducer\";\r\nimport {\r\n    SetChatsListActionCreator,\r\n    SetCurrentChatActionCreator, SetCurrentChatMessagesActionCreator,\r\n    UpdateChatsActionCreator,\r\n    UpdateChatUserImageActionCreator, UpdateCurrentChatMessagesActionCreator\r\n} from \"../../store/reducers/chatsReducer\";\r\nimport {getChatsList, getCurrentChat, getCurrentChatMessages} from \"../../store/reducers/chatsSelector\";\r\nimport {getUserInfo} from \"../../store/reducers/sidebarSelector\";\r\nimport push from \"push.js\";\r\n\r\nconst Main = () => {\r\n    const dispatch = useDispatch();\r\n    const SideBarStatus = useSelector(getSideBarStatus);\r\n    const AuthStatus = useSelector(getAuthStatus);\r\n    const ChatsList = useSelector(getChatsList);\r\n    const ChatsConnection = useSelector(getChatConnection);\r\n    const Chat = useSelector(getCurrentChat);\r\n    const UserInfo = useSelector(getUserInfo);\r\n    const CurrentChatMessages = useSelector(getCurrentChatMessages);\r\n    \r\n    // SignalR socket connection\r\n    useLayoutEffect(() => {\r\n        let Connection;\r\n        (async () => {\r\n            if (localStorage.AUTH_TOKEN) {\r\n                Connection = new signalR.HubConnectionBuilder()\r\n                    .withUrl('http://70.37.67.50/hubs/chat', {\r\n                        accessTokenFactory: () => localStorage.AUTH_TOKEN.split(\" \")[1]\r\n                    }) // Ensure same as BE\r\n                    .configureLogging(signalR.LogLevel.Information)\r\n                    .withAutomaticReconnect([1000, 3000, 5000, null])\r\n                    .build();\r\n\r\n                Connection.on('GetMessages', (data) => {\r\n                    dispatch(SetCurrentChatMessagesActionCreator(data))\r\n                    console.log('GetMessages')\r\n                    console.log(data)\r\n                });\r\n                Connection.on('GetMessage', (data) => {\r\n                    dispatch(UpdateCurrentChatMessagesActionCreator(data))\r\n                    console.log('GetMessage')\r\n                    console.log(data)\r\n                });\r\n                Connection.on('GetChats', (data) => {\r\n                    dispatch(SetChatsListActionCreator(data))\r\n                    console.log('GetChats')\r\n                    console.log(data)\r\n                });\r\n\r\n                await Connection.start();\r\n                dispatch(SetChatsConnectionActionCreator(Connection));\r\n            }\r\n        })();\r\n        return () => {\r\n            (async () => {\r\n                await Connection?.stop()\r\n                dispatch(SetCurrentChatActionCreator(null))\r\n            })();\r\n        }\r\n    }, [])\r\n    // SignalR socket connection\r\n\r\n    useEffect(() => {\r\n        const makePushNotification = async (data) => {\r\n            if (UserInfo?.userName) {\r\n                if (document.hasFocus() === false) {\r\n                    if (UserInfo?.userName !== data?.senderUserName) {\r\n                        await push.create(data.otherUserName, {\r\n                            tag: data.lastMessage + data.otherUserName,\r\n                            body: data.lastMessage,\r\n                            icon: data.otherProfileImage?.url,\r\n                            onClick: () => {\r\n                                window.focus();\r\n                                this.close();\r\n                            }\r\n                        })\r\n                    }\r\n                } else if (document.hasFocus() && Chat && Chat?.otherUserName !== data.senderUserName) {\r\n                    if (UserInfo?.userName !== data.senderUserName) {\r\n                        await push.create(data.otherUserName, {\r\n                            tag: data.lastMessage + data.otherUserName,\r\n                            body: data.lastMessage,\r\n                            icon: data.otherProfileImage?.url,\r\n                            onClick: () => {\r\n                                window.focus();\r\n                                this.close();\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        (async () => {\r\n            ChatsConnection?.on('UpdateChat', (data) => {\r\n                dispatch(UpdateChatsActionCreator(data))\r\n                dispatch(UpdateChatUserImageActionCreator(data))\r\n                makePushNotification(data)\r\n                console.log('UpdateChat')\r\n                console.log(data)\r\n            });\r\n        })();\r\n    }, [Chat, ChatsConnection, UserInfo, dispatch])\r\n\r\n\r\n    return (\r\n        <div className={SideBarStatus ? \"Main active\" : \"Main\"}>\r\n            <SideBar UserInfo={UserInfo} ChatsList={ChatsList} AuthStatus={AuthStatus}/>\r\n            <Messages ChatsConnection={ChatsConnection} Chat={Chat} UserInfo={UserInfo}\r\n                      CurrentChatMessages={CurrentChatMessages}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"names":["cancelToken","axios","localStorage","AUTH_TOKEN","response","error","status","toast","data","message","toastId","DeleteUser","store","SearchUsers","input","cancel","token","then","catch","console","log","fingerPrint","platform","FetchCurrentUser","UploadImage","image","headers","UploadBackgroundImage","ChangeUserInfo","name","email","password","LoginAPI","userName","jwtToken","RegistrationAPI","MessagesContent","handleSubmit","handleScroll","messagesList","UserInfo","ScrollRef","setInput","Chat","scrollValues","changeScrollValues","CurrentChatMessages","dispatch","useDispatch","SideBarStatus","useSelector","getSideBarStatus","FirstScroll","useRef","useEffect","length","current","scrollTop","scrollHeight","scrollButton","SetSideBarStatusActionCreator","className","onClick","ArrowBack","src","otherProfileImage","url","DefaultIcon","alt","loading","otherName","onScroll","ref","style","backgroundImage","background","TextareaAutosize","value","autoComplete","maxRows","placeholder","onKeyDown","e","key","shiftKey","preventDefault","onChange","target","clientHeight","Send","display","ArrowDownward","React","Messages","ChatsConnection","useState","scrollBottom","setScrollValues","useCallback","prop","trim","invoke","text","RecipientUserName","otherUserName","event","currentTarget","SetCurrentChatMessagesActionCreator","useMemo","map","item","senderUserName","alignSelf","profileImage","backgroundColor","color","Date","sent","toLocaleTimeString","navigator","language","hour","minute","path","element","to","Chats","ChatsList","handleClick","chat","SetCurrentChatActionCreator","chatList","messageStamp","lastMessage","substring","margin","Users","isLoading","usersList","alignItems","justifyContent","height","CircularProgress","SettingsBar","fetchSearch","SearchInput","setSearchInput","isActive","setActive","SettingsPage","refetchUserInfo","useContext","ThemeContext","theme","changeTheme","changes","backgroundImageIsDark","values","setValues","changeLocalState","backgroundIsDark","FastAverageColor","getColorAsync","algorithm","isDark","useMutation","onSuccess","fetchNewImage","mutate","newImageIsLoading","fetchNewUserInfo","newUserInfoIsLoading","fetchNewBackgroundImage","newBackgroundImageIsLoading","schema","yup","shape","required","max","min","formik","useFormik","initialValues","validationSchema","onSubmit","URL","createObjectURL","objectPosition","objectFit","width","borderRadius","gridTemplateRows","Button","variant","disabled","component","id","type","accept","files","FormControl","sx","TextField","label","handleChange","touched","Boolean","errors","helperText","Brightness4","BrightnessHigh","Switch","checked","Sidebar","SideBarContent","AuthStatus","useQuery","enabled","fetchedUserInfo","refetch","SetUserInfoActionCreator","getCurrentChat","state","ChatsComponent","CurrentChat","getChatsList","getCurrentChatMessages","getUserInfo","SideBarComponent","getAuthStatus","getChatConnection","useLayoutEffect","Connection","signalR","withUrl","accessTokenFactory","split","configureLogging","withAutomaticReconnect","build","on","UpdateCurrentChatMessagesActionCreator","SetChatsListActionCreator","start","SetChatsConnectionActionCreator","stop","makePushNotification","document","hasFocus","push","tag","body","icon","window","focus","close","UpdateChatsActionCreator","UpdateChatUserImageActionCreator"],"sourceRoot":""}